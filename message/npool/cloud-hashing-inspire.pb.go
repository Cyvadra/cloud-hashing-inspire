// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-inspire.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type NewUserRewardSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         string `protobuf:"bytes,200,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                      string `protobuf:"bytes,201,opt,name=AppID,proto3" json:"AppID,omitempty"`
	RegistrationCouponID       string `protobuf:"bytes,202,opt,name=RegistrationCouponID,proto3" json:"RegistrationCouponID,omitempty"`
	KycCouponID                string `protobuf:"bytes,203,opt,name=KycCouponID,proto3" json:"KycCouponID,omitempty"`
	AutoGenerateInvitationCode bool   `protobuf:"varint,204,opt,name=AutoGenerateInvitationCode,proto3" json:"AutoGenerateInvitationCode,omitempty"`
}

func (x *NewUserRewardSetting) Reset() {
	*x = NewUserRewardSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserRewardSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserRewardSetting) ProtoMessage() {}

func (x *NewUserRewardSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserRewardSetting.ProtoReflect.Descriptor instead.
func (*NewUserRewardSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{1}
}

func (x *NewUserRewardSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NewUserRewardSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *NewUserRewardSetting) GetRegistrationCouponID() string {
	if x != nil {
		return x.RegistrationCouponID
	}
	return ""
}

func (x *NewUserRewardSetting) GetKycCouponID() string {
	if x != nil {
		return x.KycCouponID
	}
	return ""
}

func (x *NewUserRewardSetting) GetAutoGenerateInvitationCode() bool {
	if x != nil {
		return x.AutoGenerateInvitationCode
	}
	return false
}

type CreateNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNewUserRewardSettingRequest) Reset() {
	*x = CreateNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewUserRewardSettingRequest) ProtoMessage() {}

func (x *CreateNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNewUserRewardSettingRequest) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNewUserRewardSettingResponse) Reset() {
	*x = CreateNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewUserRewardSettingResponse) ProtoMessage() {}

func (x *CreateNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,500,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNewUserRewardSettingRequest) Reset() {
	*x = GetNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingRequest) ProtoMessage() {}

func (x *GetNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{4}
}

func (x *GetNewUserRewardSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNewUserRewardSettingResponse) Reset() {
	*x = GetNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingResponse) ProtoMessage() {}

func (x *GetNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{5}
}

func (x *GetNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNewUserRewardSettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,700,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetNewUserRewardSettingByAppRequest) Reset() {
	*x = GetNewUserRewardSettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingByAppRequest) ProtoMessage() {}

func (x *GetNewUserRewardSettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{6}
}

func (x *GetNewUserRewardSettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetNewUserRewardSettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNewUserRewardSettingByAppResponse) Reset() {
	*x = GetNewUserRewardSettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingByAppResponse) ProtoMessage() {}

func (x *GetNewUserRewardSettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{7}
}

func (x *GetNewUserRewardSettingByAppResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNewUserRewardSettingRequest) Reset() {
	*x = UpdateNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewUserRewardSettingRequest) ProtoMessage() {}

func (x *UpdateNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNewUserRewardSettingRequest) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,1000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNewUserRewardSettingResponse) Reset() {
	*x = UpdateNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewUserRewardSettingResponse) ProtoMessage() {}

func (x *UpdateNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type AgencySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          string `protobuf:"bytes,1100,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                       string `protobuf:"bytes,1101,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID                      string `protobuf:"bytes,1102,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	RegistrationRewardThreshold int32  `protobuf:"varint,1103,opt,name=RegistrationRewardThreshold,proto3" json:"RegistrationRewardThreshold,omitempty"`
	RegistrationCouponID        string `protobuf:"bytes,1104,opt,name=RegistrationCouponID,proto3" json:"RegistrationCouponID,omitempty"`
	KycRewardThreshold          int32  `protobuf:"varint,1105,opt,name=KycRewardThreshold,proto3" json:"KycRewardThreshold,omitempty"`
	KycCouponID                 string `protobuf:"bytes,1106,opt,name=KycCouponID,proto3" json:"KycCouponID,omitempty"`
	TotalPurchaseRewardPercent  int32  `protobuf:"varint,1107,opt,name=TotalPurchaseRewardPercent,proto3" json:"TotalPurchaseRewardPercent,omitempty"`
	PurchaseRewardChainLevels   int32  `protobuf:"varint,1108,opt,name=PurchaseRewardChainLevels,proto3" json:"PurchaseRewardChainLevels,omitempty"`
	LevelPurchaseRewardPercent  int32  `protobuf:"varint,1109,opt,name=LevelPurchaseRewardPercent,proto3" json:"LevelPurchaseRewardPercent,omitempty"`
}

func (x *AgencySetting) Reset() {
	*x = AgencySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencySetting) ProtoMessage() {}

func (x *AgencySetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencySetting.ProtoReflect.Descriptor instead.
func (*AgencySetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{10}
}

func (x *AgencySetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AgencySetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AgencySetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AgencySetting) GetRegistrationRewardThreshold() int32 {
	if x != nil {
		return x.RegistrationRewardThreshold
	}
	return 0
}

func (x *AgencySetting) GetRegistrationCouponID() string {
	if x != nil {
		return x.RegistrationCouponID
	}
	return ""
}

func (x *AgencySetting) GetKycRewardThreshold() int32 {
	if x != nil {
		return x.KycRewardThreshold
	}
	return 0
}

func (x *AgencySetting) GetKycCouponID() string {
	if x != nil {
		return x.KycCouponID
	}
	return ""
}

func (x *AgencySetting) GetTotalPurchaseRewardPercent() int32 {
	if x != nil {
		return x.TotalPurchaseRewardPercent
	}
	return 0
}

func (x *AgencySetting) GetPurchaseRewardChainLevels() int32 {
	if x != nil {
		return x.PurchaseRewardChainLevels
	}
	return 0
}

func (x *AgencySetting) GetLevelPurchaseRewardPercent() int32 {
	if x != nil {
		return x.LevelPurchaseRewardPercent
	}
	return 0
}

type CreateAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAgencySettingRequest) Reset() {
	*x = CreateAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgencySettingRequest) ProtoMessage() {}

func (x *CreateAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*CreateAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAgencySettingRequest) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAgencySettingResponse) Reset() {
	*x = CreateAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgencySettingResponse) ProtoMessage() {}

func (x *CreateAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*CreateAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{12}
}

func (x *CreateAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1400,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAgencySettingRequest) Reset() {
	*x = GetAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingRequest) ProtoMessage() {}

func (x *GetAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{13}
}

func (x *GetAgencySettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingResponse) Reset() {
	*x = GetAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingResponse) ProtoMessage() {}

func (x *GetAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{14}
}

func (x *GetAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAgencySettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,1600,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetAgencySettingByAppRequest) Reset() {
	*x = GetAgencySettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingByAppRequest) ProtoMessage() {}

func (x *GetAgencySettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{15}
}

func (x *GetAgencySettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAgencySettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingByAppResponse) Reset() {
	*x = GetAgencySettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingByAppResponse) ProtoMessage() {}

func (x *GetAgencySettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{16}
}

func (x *GetAgencySettingByAppResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAgencySettingRequest) Reset() {
	*x = UpdateAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgencySettingRequest) ProtoMessage() {}

func (x *UpdateAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAgencySettingRequest) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,1900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAgencySettingResponse) Reset() {
	*x = UpdateAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgencySettingResponse) ProtoMessage() {}

func (x *UpdateAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type PurchaseInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,2000,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID            string `protobuf:"bytes,2001,opt,name=AppID,proto3" json:"AppID,omitempty"`
	OrderID          string `protobuf:"bytes,2002,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	InvitationCodeID string `protobuf:"bytes,2003,opt,name=InvitationCodeID,proto3" json:"InvitationCodeID,omitempty"`
	Fulfilled        bool   `protobuf:"varint,2004,opt,name=Fulfilled,proto3" json:"Fulfilled,omitempty"`
}

func (x *PurchaseInvitation) Reset() {
	*x = PurchaseInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseInvitation) ProtoMessage() {}

func (x *PurchaseInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseInvitation.ProtoReflect.Descriptor instead.
func (*PurchaseInvitation) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{19}
}

func (x *PurchaseInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PurchaseInvitation) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PurchaseInvitation) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PurchaseInvitation) GetInvitationCodeID() string {
	if x != nil {
		return x.InvitationCodeID
	}
	return ""
}

func (x *PurchaseInvitation) GetFulfilled() bool {
	if x != nil {
		return x.Fulfilled
	}
	return false
}

type CreatePurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePurchaseInvitationRequest) Reset() {
	*x = CreatePurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseInvitationRequest) ProtoMessage() {}

func (x *CreatePurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{20}
}

func (x *CreatePurchaseInvitationRequest) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePurchaseInvitationResponse) Reset() {
	*x = CreatePurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseInvitationResponse) ProtoMessage() {}

func (x *CreatePurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreatePurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{21}
}

func (x *CreatePurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2210,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePurchaseInvitationRequest) Reset() {
	*x = UpdatePurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseInvitationRequest) ProtoMessage() {}

func (x *UpdatePurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{22}
}

func (x *UpdatePurchaseInvitationRequest) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2220,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePurchaseInvitationResponse) Reset() {
	*x = UpdatePurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseInvitationResponse) ProtoMessage() {}

func (x *UpdatePurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{23}
}

func (x *UpdatePurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2300,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPurchaseInvitationRequest) Reset() {
	*x = GetPurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{24}
}

func (x *GetPurchaseInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPurchaseInvitationResponse) Reset() {
	*x = GetPurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{25}
}

func (x *GetPurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPurchaseInvitationsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,2500,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetPurchaseInvitationsByAppRequest) Reset() {
	*x = GetPurchaseInvitationsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationsByAppRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{26}
}

func (x *GetPurchaseInvitationsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetPurchaseInvitationsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PurchaseInvitation `protobuf:"bytes,2600,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetPurchaseInvitationsByAppResponse) Reset() {
	*x = GetPurchaseInvitationsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationsByAppResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{27}
}

func (x *GetPurchaseInvitationsByAppResponse) GetInfos() []*PurchaseInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetPurchaseInvitationByAppOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,2700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	OrderID string `protobuf:"bytes,2701,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetPurchaseInvitationByAppOrderRequest) Reset() {
	*x = GetPurchaseInvitationByAppOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationByAppOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationByAppOrderRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationByAppOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationByAppOrderRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationByAppOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{28}
}

func (x *GetPurchaseInvitationByAppOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetPurchaseInvitationByAppOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type GetPurchaseInvitationByAppOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,2800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPurchaseInvitationByAppOrderResponse) Reset() {
	*x = GetPurchaseInvitationByAppOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationByAppOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationByAppOrderResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationByAppOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationByAppOrderResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationByAppOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{29}
}

func (x *GetPurchaseInvitationByAppOrderResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type RegistrationInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,2900,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,2901,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviterID string `protobuf:"bytes,2902,opt,name=InviterID,proto3" json:"InviterID,omitempty"`
	InviteeID string `protobuf:"bytes,2903,opt,name=InviteeID,proto3" json:"InviteeID,omitempty"`
	Fulfilled bool   `protobuf:"varint,2904,opt,name=Fulfilled,proto3" json:"Fulfilled,omitempty"`
}

func (x *RegistrationInvitation) Reset() {
	*x = RegistrationInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationInvitation) ProtoMessage() {}

func (x *RegistrationInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationInvitation.ProtoReflect.Descriptor instead.
func (*RegistrationInvitation) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{30}
}

func (x *RegistrationInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RegistrationInvitation) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviterID() string {
	if x != nil {
		return x.InviterID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

func (x *RegistrationInvitation) GetFulfilled() bool {
	if x != nil {
		return x.Fulfilled
	}
	return false
}

type CreateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationRequest) Reset() {
	*x = CreateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationRequest) ProtoMessage() {}

func (x *CreateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{31}
}

func (x *CreateRegistrationInvitationRequest) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationResponse) Reset() {
	*x = CreateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationResponse) ProtoMessage() {}

func (x *CreateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{32}
}

func (x *CreateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2210,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationRequest) Reset() {
	*x = UpdateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationRequest) ProtoMessage() {}

func (x *UpdateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRegistrationInvitationRequest) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2220,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationResponse) Reset() {
	*x = UpdateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationResponse) ProtoMessage() {}

func (x *UpdateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2300,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRegistrationInvitationRequest) Reset() {
	*x = GetRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{35}
}

func (x *GetRegistrationInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationResponse) Reset() {
	*x = GetRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{36}
}

func (x *GetRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,2500,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetRegistrationInvitationsByAppRequest) Reset() {
	*x = GetRegistrationInvitationsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{37}
}

func (x *GetRegistrationInvitationsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetRegistrationInvitationsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,2600,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetRegistrationInvitationsByAppResponse) Reset() {
	*x = GetRegistrationInvitationsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{38}
}

func (x *GetRegistrationInvitationsByAppResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetRegistrationInvitationsByAppInviterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string `protobuf:"bytes,2700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviterID string `protobuf:"bytes,2701,opt,name=InviterID,proto3" json:"InviterID,omitempty"`
}

func (x *GetRegistrationInvitationsByAppInviterRequest) Reset() {
	*x = GetRegistrationInvitationsByAppInviterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppInviterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppInviterRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppInviterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppInviterRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppInviterRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{39}
}

func (x *GetRegistrationInvitationsByAppInviterRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetRegistrationInvitationsByAppInviterRequest) GetInviterID() string {
	if x != nil {
		return x.InviterID
	}
	return ""
}

type GetRegistrationInvitationsByAppInviterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,2800,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetRegistrationInvitationsByAppInviterResponse) Reset() {
	*x = GetRegistrationInvitationsByAppInviterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppInviterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppInviterResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppInviterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppInviterResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppInviterResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{40}
}

func (x *GetRegistrationInvitationsByAppInviterResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetRegistrationInvitationByAppInviteeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string `protobuf:"bytes,2700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviteeID string `protobuf:"bytes,2701,opt,name=InviteeID,proto3" json:"InviteeID,omitempty"`
}

func (x *GetRegistrationInvitationByAppInviteeRequest) Reset() {
	*x = GetRegistrationInvitationByAppInviteeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationByAppInviteeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationByAppInviteeRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationByAppInviteeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationByAppInviteeRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationByAppInviteeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{41}
}

func (x *GetRegistrationInvitationByAppInviteeRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetRegistrationInvitationByAppInviteeRequest) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

type GetRegistrationInvitationByAppInviteeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,2800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationByAppInviteeResponse) Reset() {
	*x = GetRegistrationInvitationByAppInviteeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationByAppInviteeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationByAppInviteeResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationByAppInviteeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationByAppInviteeResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationByAppInviteeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{42}
}

func (x *GetRegistrationInvitationByAppInviteeResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserInvitationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,2900,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID         string `protobuf:"bytes,2901,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID          string `protobuf:"bytes,2902,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InvitationCode string `protobuf:"bytes,2903,opt,name=InvitationCode,proto3" json:"InvitationCode,omitempty"`
}

func (x *UserInvitationCode) Reset() {
	*x = UserInvitationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvitationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvitationCode) ProtoMessage() {}

func (x *UserInvitationCode) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvitationCode.ProtoReflect.Descriptor instead.
func (*UserInvitationCode) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{43}
}

func (x *UserInvitationCode) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserInvitationCode) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInvitationCode) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserInvitationCode) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

type CreateUserInvitationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,3000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeRequest) Reset() {
	*x = CreateUserInvitationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeRequest) ProtoMessage() {}

func (x *CreateUserInvitationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{44}
}

func (x *CreateUserInvitationCodeRequest) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,3100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeResponse) Reset() {
	*x = CreateUserInvitationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeResponse) ProtoMessage() {}

func (x *CreateUserInvitationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{45}
}

func (x *CreateUserInvitationCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3200,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserInvitationCodeRequest) Reset() {
	*x = GetUserInvitationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{46}
}

func (x *GetUserInvitationCodeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetUserInvitationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,3300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeResponse) Reset() {
	*x = GetUserInvitationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{47}
}

func (x *GetUserInvitationCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodeByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,3400,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,3401,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserInvitationCodeByAppUserRequest) Reset() {
	*x = GetUserInvitationCodeByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByAppUserRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{48}
}

func (x *GetUserInvitationCodeByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserInvitationCodeByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserInvitationCodeByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,3500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeByAppUserResponse) Reset() {
	*x = GetUserInvitationCodeByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByAppUserResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserInvitationCodeByAppUserResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodeByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,3510,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GetUserInvitationCodeByCodeRequest) Reset() {
	*x = GetUserInvitationCodeByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByCodeRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByCodeRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{50}
}

func (x *GetUserInvitationCodeByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetUserInvitationCodeByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,3520,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeByCodeResponse) Reset() {
	*x = GetUserInvitationCodeByCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByCodeResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByCodeResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{51}
}

func (x *GetUserInvitationCodeByCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CouponAllocated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,3600,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID   string `protobuf:"bytes,3601,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID    string `protobuf:"bytes,3602,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Used     bool   `protobuf:"varint,3603,opt,name=Used,proto3" json:"Used,omitempty"`
	CouponID string `protobuf:"bytes,3604,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
}

func (x *CouponAllocated) Reset() {
	*x = CouponAllocated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponAllocated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponAllocated) ProtoMessage() {}

func (x *CouponAllocated) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponAllocated.ProtoReflect.Descriptor instead.
func (*CouponAllocated) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{52}
}

func (x *CouponAllocated) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponAllocated) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CouponAllocated) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponAllocated) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

func (x *CouponAllocated) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

type CreateCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,3700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponAllocatedRequest) Reset() {
	*x = CreateCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponAllocatedRequest) ProtoMessage() {}

func (x *CreateCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{53}
}

func (x *CreateCouponAllocatedRequest) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,3700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponAllocatedResponse) Reset() {
	*x = CreateCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponAllocatedResponse) ProtoMessage() {}

func (x *CreateCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*CreateCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{54}
}

func (x *CreateCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3800,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCouponAllocatedRequest) Reset() {
	*x = GetCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedRequest) ProtoMessage() {}

func (x *GetCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{55}
}

func (x *GetCouponAllocatedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,3900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCouponAllocatedResponse) Reset() {
	*x = GetCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedResponse) ProtoMessage() {}

func (x *GetCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{56}
}

func (x *GetCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponsAllocatedByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,4000,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetCouponsAllocatedByAppRequest) Reset() {
	*x = GetCouponsAllocatedByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{57}
}

func (x *GetCouponsAllocatedByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetCouponsAllocatedByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocated `protobuf:"bytes,4100,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedByAppResponse) Reset() {
	*x = GetCouponsAllocatedByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{58}
}

func (x *GetCouponsAllocatedByAppResponse) GetInfos() []*CouponAllocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponsAllocatedByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,4200,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,4201,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCouponsAllocatedByAppUserRequest) Reset() {
	*x = GetCouponsAllocatedByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppUserRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{59}
}

func (x *GetCouponsAllocatedByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCouponsAllocatedByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCouponsAllocatedByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocated `protobuf:"bytes,4300,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedByAppUserResponse) Reset() {
	*x = GetCouponsAllocatedByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppUserResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{60}
}

func (x *GetCouponsAllocatedByAppUserResponse) GetInfos() []*CouponAllocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,4400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponAllocatedRequest) Reset() {
	*x = UpdateCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponAllocatedRequest) ProtoMessage() {}

func (x *UpdateCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*UpdateCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateCouponAllocatedRequest) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,4500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponAllocatedResponse) Reset() {
	*x = UpdateCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponAllocatedResponse) ProtoMessage() {}

func (x *UpdateCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*UpdateCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type CouponPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,4600,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,4601,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ReleaseByUserID string  `protobuf:"bytes,4602,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Denomination    float64 `protobuf:"fixed64,4603,opt,name=Denomination,proto3" json:"Denomination,omitempty"`
	Circulation     int32   `protobuf:"varint,4604,opt,name=Circulation,proto3" json:"Circulation,omitempty"`
	Start           uint32  `protobuf:"varint,4605,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32   `protobuf:"varint,4606,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string  `protobuf:"bytes,4607,opt,name=Message,proto3" json:"Message,omitempty"`
	Name            string  `protobuf:"bytes,4608,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CouponPool) Reset() {
	*x = CouponPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponPool) ProtoMessage() {}

func (x *CouponPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponPool.ProtoReflect.Descriptor instead.
func (*CouponPool) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{63}
}

func (x *CouponPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponPool) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *CouponPool) GetDenomination() float64 {
	if x != nil {
		return x.Denomination
	}
	return 0
}

func (x *CouponPool) GetCirculation() int32 {
	if x != nil {
		return x.Circulation
	}
	return 0
}

func (x *CouponPool) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CouponPool) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *CouponPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CouponPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,4700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolRequest) Reset() {
	*x = CreateCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolRequest) ProtoMessage() {}

func (x *CreateCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{64}
}

func (x *CreateCouponPoolRequest) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,4800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolResponse) Reset() {
	*x = CreateCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolResponse) ProtoMessage() {}

func (x *CreateCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{65}
}

func (x *CreateCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,4810,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponPoolRequest) Reset() {
	*x = UpdateCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponPoolRequest) ProtoMessage() {}

func (x *UpdateCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateCouponPoolRequest) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,4820,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponPoolResponse) Reset() {
	*x = UpdateCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponPoolResponse) ProtoMessage() {}

func (x *UpdateCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,4900,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCouponPoolRequest) Reset() {
	*x = GetCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolRequest) ProtoMessage() {}

func (x *GetCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{68}
}

func (x *GetCouponPoolRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,5000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCouponPoolResponse) Reset() {
	*x = GetCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolResponse) ProtoMessage() {}

func (x *GetCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{69}
}

func (x *GetCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponPoolsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,5100,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetCouponPoolsByAppRequest) Reset() {
	*x = GetCouponPoolsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppRequest) ProtoMessage() {}

func (x *GetCouponPoolsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{70}
}

func (x *GetCouponPoolsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetCouponPoolsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,5200,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByAppResponse) Reset() {
	*x = GetCouponPoolsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppResponse) ProtoMessage() {}

func (x *GetCouponPoolsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{71}
}

func (x *GetCouponPoolsByAppResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponPoolsByAppReleaserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,5300,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,5301,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCouponPoolsByAppReleaserRequest) Reset() {
	*x = GetCouponPoolsByAppReleaserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppReleaserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppReleaserRequest) ProtoMessage() {}

func (x *GetCouponPoolsByAppReleaserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppReleaserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppReleaserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{72}
}

func (x *GetCouponPoolsByAppReleaserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCouponPoolsByAppReleaserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCouponPoolsByAppReleaserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,5400,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByAppReleaserResponse) Reset() {
	*x = GetCouponPoolsByAppReleaserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppReleaserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppReleaserResponse) ProtoMessage() {}

func (x *GetCouponPoolsByAppReleaserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppReleaserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppReleaserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{73}
}

func (x *GetCouponPoolsByAppReleaserResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type AppCouponSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,5500,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,5501,opt,name=AppID,proto3" json:"AppID,omitempty"`
	DominationLimit float64 `protobuf:"fixed64,5502,opt,name=DominationLimit,proto3" json:"DominationLimit,omitempty"`
	TotalLimit      int32   `protobuf:"varint,5503,opt,name=TotalLimit,proto3" json:"TotalLimit,omitempty"`
}

func (x *AppCouponSetting) Reset() {
	*x = AppCouponSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCouponSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCouponSetting) ProtoMessage() {}

func (x *AppCouponSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCouponSetting.ProtoReflect.Descriptor instead.
func (*AppCouponSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{74}
}

func (x *AppCouponSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppCouponSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppCouponSetting) GetDominationLimit() float64 {
	if x != nil {
		return x.DominationLimit
	}
	return 0
}

func (x *AppCouponSetting) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

type CreateAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,5600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCouponSettingRequest) Reset() {
	*x = CreateAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCouponSettingRequest) ProtoMessage() {}

func (x *CreateAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{75}
}

func (x *CreateAppCouponSettingRequest) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,5700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCouponSettingResponse) Reset() {
	*x = CreateAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCouponSettingResponse) ProtoMessage() {}

func (x *CreateAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{76}
}

func (x *CreateAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,5800,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAppCouponSettingRequest) Reset() {
	*x = GetAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingRequest) ProtoMessage() {}

func (x *GetAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{77}
}

func (x *GetAppCouponSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,5900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCouponSettingResponse) Reset() {
	*x = GetAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingResponse) ProtoMessage() {}

func (x *GetAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{78}
}

func (x *GetAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCouponSettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,6000,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetAppCouponSettingByAppRequest) Reset() {
	*x = GetAppCouponSettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingByAppRequest) ProtoMessage() {}

func (x *GetAppCouponSettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{79}
}

func (x *GetAppCouponSettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAppCouponSettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,6100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCouponSettingByAppResponse) Reset() {
	*x = GetAppCouponSettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingByAppResponse) ProtoMessage() {}

func (x *GetAppCouponSettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{80}
}

func (x *GetAppCouponSettingByAppResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,6200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppCouponSettingRequest) Reset() {
	*x = UpdateAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppCouponSettingRequest) ProtoMessage() {}

func (x *UpdateAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateAppCouponSettingRequest) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,6200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppCouponSettingResponse) Reset() {
	*x = UpdateAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppCouponSettingResponse) ProtoMessage() {}

func (x *UpdateAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type DefaultKpiSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string  `protobuf:"bytes,6300,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string  `protobuf:"bytes,6301,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID  string  `protobuf:"bytes,6302,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Amount  float64 `protobuf:"fixed64,6303,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Percent int32   `protobuf:"varint,6304,opt,name=Percent,proto3" json:"Percent,omitempty"`
}

func (x *DefaultKpiSetting) Reset() {
	*x = DefaultKpiSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultKpiSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultKpiSetting) ProtoMessage() {}

func (x *DefaultKpiSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultKpiSetting.ProtoReflect.Descriptor instead.
func (*DefaultKpiSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{83}
}

func (x *DefaultKpiSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DefaultKpiSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DefaultKpiSetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *DefaultKpiSetting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DefaultKpiSetting) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type CreateDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,6400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDefaultKpiSettingRequest) Reset() {
	*x = CreateDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefaultKpiSettingRequest) ProtoMessage() {}

func (x *CreateDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{84}
}

func (x *CreateDefaultKpiSettingRequest) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,6500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDefaultKpiSettingResponse) Reset() {
	*x = CreateDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefaultKpiSettingResponse) ProtoMessage() {}

func (x *CreateDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{85}
}

func (x *CreateDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,6600,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetDefaultKpiSettingRequest) Reset() {
	*x = GetDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingRequest) ProtoMessage() {}

func (x *GetDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{86}
}

func (x *GetDefaultKpiSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,6700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDefaultKpiSettingResponse) Reset() {
	*x = GetDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingResponse) ProtoMessage() {}

func (x *GetDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{87}
}

func (x *GetDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDefaultKpiSettingByAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,6800,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID string `protobuf:"bytes,6801,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetDefaultKpiSettingByAppGoodRequest) Reset() {
	*x = GetDefaultKpiSettingByAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingByAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingByAppGoodRequest) ProtoMessage() {}

func (x *GetDefaultKpiSettingByAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingByAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingByAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{88}
}

func (x *GetDefaultKpiSettingByAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDefaultKpiSettingByAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetDefaultKpiSettingByAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,6900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDefaultKpiSettingByAppGoodResponse) Reset() {
	*x = GetDefaultKpiSettingByAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingByAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingByAppGoodResponse) ProtoMessage() {}

func (x *GetDefaultKpiSettingByAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingByAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingByAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{89}
}

func (x *GetDefaultKpiSettingByAppGoodResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,7000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDefaultKpiSettingRequest) Reset() {
	*x = UpdateDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultKpiSettingRequest) ProtoMessage() {}

func (x *UpdateDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateDefaultKpiSettingRequest) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,7100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDefaultKpiSettingResponse) Reset() {
	*x = UpdateDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultKpiSettingResponse) ProtoMessage() {}

func (x *UpdateDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserKpiSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string  `protobuf:"bytes,7200,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string  `protobuf:"bytes,7201,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID  string  `protobuf:"bytes,7202,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GoodID  string  `protobuf:"bytes,7203,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Amount  float64 `protobuf:"fixed64,7204,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Percent int32   `protobuf:"varint,7205,opt,name=Percent,proto3" json:"Percent,omitempty"`
}

func (x *UserKpiSetting) Reset() {
	*x = UserKpiSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserKpiSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserKpiSetting) ProtoMessage() {}

func (x *UserKpiSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserKpiSetting.ProtoReflect.Descriptor instead.
func (*UserKpiSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{92}
}

func (x *UserKpiSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserKpiSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserKpiSetting) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserKpiSetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *UserKpiSetting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserKpiSetting) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type CreateUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,7300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserKpiSettingRequest) Reset() {
	*x = CreateUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserKpiSettingRequest) ProtoMessage() {}

func (x *CreateUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{93}
}

func (x *CreateUserKpiSettingRequest) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,7400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserKpiSettingResponse) Reset() {
	*x = CreateUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserKpiSettingResponse) ProtoMessage() {}

func (x *CreateUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{94}
}

func (x *CreateUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,7500,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserKpiSettingRequest) Reset() {
	*x = GetUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingRequest) ProtoMessage() {}

func (x *GetUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{95}
}

func (x *GetUserKpiSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,7600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserKpiSettingResponse) Reset() {
	*x = GetUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingResponse) ProtoMessage() {}

func (x *GetUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{96}
}

func (x *GetUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserKpiSettingByAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,7700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID string `protobuf:"bytes,7701,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetUserKpiSettingByAppGoodRequest) Reset() {
	*x = GetUserKpiSettingByAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingByAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingByAppGoodRequest) ProtoMessage() {}

func (x *GetUserKpiSettingByAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingByAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingByAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{97}
}

func (x *GetUserKpiSettingByAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserKpiSettingByAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetUserKpiSettingByAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,7800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserKpiSettingByAppGoodResponse) Reset() {
	*x = GetUserKpiSettingByAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingByAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingByAppGoodResponse) ProtoMessage() {}

func (x *GetUserKpiSettingByAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingByAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingByAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{98}
}

func (x *GetUserKpiSettingByAppGoodResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,7900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserKpiSettingRequest) Reset() {
	*x = UpdateUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserKpiSettingRequest) ProtoMessage() {}

func (x *UpdateUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateUserKpiSettingRequest) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,8000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserKpiSettingResponse) Reset() {
	*x = UpdateUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserKpiSettingResponse) ProtoMessage() {}

func (x *UpdateUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cloud_hashing_inspire_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_inspire_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xd7, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x79, 0x63,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x41,
	0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x66, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd8, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdd, 0x03, 0x0a, 0x0d, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xce, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x1b,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xcf, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x33, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd0, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xd1, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd2, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x79, 0x63,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x1a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0xd3, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0xd4, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0xd5, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xb0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x94, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0xf8, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x58,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xdc, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0xc0, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22,
	0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa4, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x88, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xec, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1d,
	0x0a, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0xd4, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x64, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb4, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x98, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa2, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x65, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xfc, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xe0, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xc4, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xa8, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x8c, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x8d, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x6c, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x9d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0xd5, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0xd6, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0xd7,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0xd8, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22,
	0x6c, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb4,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x98, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x23,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa2, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0xfc, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6a,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xc4, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0xa8, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x65, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x8c, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x8d, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0xf0, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x64, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x8c, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0x8d, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xf0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x7e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xd4, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0xd5, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xd6, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xd7, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x64, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x9c, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x80, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x62, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe4, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x57, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0xc8, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xc9, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xb6, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x68, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xc0, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x90, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x91, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x92, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x93, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x94, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf4, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf4, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xd8, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x5c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xbc, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x38, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xa0, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x84, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x55, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0xe8, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xe9, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xcc, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x94, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf8, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xf9, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xfa, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xfd, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x18, 0xfe, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xff, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x80, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xdc, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xc0, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xca, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xd4, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x27, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xa4, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x88, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x33, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xec, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xd0, 0x28, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x54, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0xb4, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb5, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x98, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xfc, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xfd, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xfe, 0x2a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0xff, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xc4, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xa8, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8c,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0xf0, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x22, 0x63, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd4, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xb8, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xb8, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x9c, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x9d, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x9e, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9f, 0x31, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0xa0, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x80, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe4, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xc8, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x56, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x90, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x91, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf4, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd8,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xbc, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x01,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xa0, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xa1, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0xa2, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xa3, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa4, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0xa5,
	0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x5c,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x84, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe8, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xcc, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x3b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x94, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x95, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf8, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xdc, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc0, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x82, 0x44, 0x0a, 0x13,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xc6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12,
	0xba, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xd0, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x65,
	0x77, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12,
	0xc6, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x36, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79,
	0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xb0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0xca, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a,
	0x12, 0xdb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62,
	0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xcc,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xcc, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xda, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x12, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xf7, 0x01, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x48, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xf4, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x12, 0x46, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xbb, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0xd8, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x79, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x79,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12,
	0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70,
	0x3a, 0x01, 0x2a, 0x12, 0xcf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f,
	0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x79, 0x2f,
	0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f,
	0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xad,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f,
	0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xd4,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xc8, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0xad, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a,
	0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_cloud_hashing_inspire_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_inspire_proto_rawDescData = file_npool_cloud_hashing_inspire_proto_rawDesc
)

func file_npool_cloud_hashing_inspire_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_inspire_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_inspire_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_inspire_proto_rawDescData)
	})
	return file_npool_cloud_hashing_inspire_proto_rawDescData
}

var file_npool_cloud_hashing_inspire_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_npool_cloud_hashing_inspire_proto_goTypes = []interface{}{
	(*VersionResponse)(nil),                                // 0: cloud.hashing.inspire.v1.VersionResponse
	(*NewUserRewardSetting)(nil),                           // 1: cloud.hashing.inspire.v1.NewUserRewardSetting
	(*CreateNewUserRewardSettingRequest)(nil),              // 2: cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest
	(*CreateNewUserRewardSettingResponse)(nil),             // 3: cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse
	(*GetNewUserRewardSettingRequest)(nil),                 // 4: cloud.hashing.inspire.v1.GetNewUserRewardSettingRequest
	(*GetNewUserRewardSettingResponse)(nil),                // 5: cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse
	(*GetNewUserRewardSettingByAppRequest)(nil),            // 6: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppRequest
	(*GetNewUserRewardSettingByAppResponse)(nil),           // 7: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse
	(*UpdateNewUserRewardSettingRequest)(nil),              // 8: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest
	(*UpdateNewUserRewardSettingResponse)(nil),             // 9: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse
	(*AgencySetting)(nil),                                  // 10: cloud.hashing.inspire.v1.AgencySetting
	(*CreateAgencySettingRequest)(nil),                     // 11: cloud.hashing.inspire.v1.CreateAgencySettingRequest
	(*CreateAgencySettingResponse)(nil),                    // 12: cloud.hashing.inspire.v1.CreateAgencySettingResponse
	(*GetAgencySettingRequest)(nil),                        // 13: cloud.hashing.inspire.v1.GetAgencySettingRequest
	(*GetAgencySettingResponse)(nil),                       // 14: cloud.hashing.inspire.v1.GetAgencySettingResponse
	(*GetAgencySettingByAppRequest)(nil),                   // 15: cloud.hashing.inspire.v1.GetAgencySettingByAppRequest
	(*GetAgencySettingByAppResponse)(nil),                  // 16: cloud.hashing.inspire.v1.GetAgencySettingByAppResponse
	(*UpdateAgencySettingRequest)(nil),                     // 17: cloud.hashing.inspire.v1.UpdateAgencySettingRequest
	(*UpdateAgencySettingResponse)(nil),                    // 18: cloud.hashing.inspire.v1.UpdateAgencySettingResponse
	(*PurchaseInvitation)(nil),                             // 19: cloud.hashing.inspire.v1.PurchaseInvitation
	(*CreatePurchaseInvitationRequest)(nil),                // 20: cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest
	(*CreatePurchaseInvitationResponse)(nil),               // 21: cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse
	(*UpdatePurchaseInvitationRequest)(nil),                // 22: cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest
	(*UpdatePurchaseInvitationResponse)(nil),               // 23: cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse
	(*GetPurchaseInvitationRequest)(nil),                   // 24: cloud.hashing.inspire.v1.GetPurchaseInvitationRequest
	(*GetPurchaseInvitationResponse)(nil),                  // 25: cloud.hashing.inspire.v1.GetPurchaseInvitationResponse
	(*GetPurchaseInvitationsByAppRequest)(nil),             // 26: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppRequest
	(*GetPurchaseInvitationsByAppResponse)(nil),            // 27: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse
	(*GetPurchaseInvitationByAppOrderRequest)(nil),         // 28: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderRequest
	(*GetPurchaseInvitationByAppOrderResponse)(nil),        // 29: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse
	(*RegistrationInvitation)(nil),                         // 30: cloud.hashing.inspire.v1.RegistrationInvitation
	(*CreateRegistrationInvitationRequest)(nil),            // 31: cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest
	(*CreateRegistrationInvitationResponse)(nil),           // 32: cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse
	(*UpdateRegistrationInvitationRequest)(nil),            // 33: cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest
	(*UpdateRegistrationInvitationResponse)(nil),           // 34: cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse
	(*GetRegistrationInvitationRequest)(nil),               // 35: cloud.hashing.inspire.v1.GetRegistrationInvitationRequest
	(*GetRegistrationInvitationResponse)(nil),              // 36: cloud.hashing.inspire.v1.GetRegistrationInvitationResponse
	(*GetRegistrationInvitationsByAppRequest)(nil),         // 37: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppRequest
	(*GetRegistrationInvitationsByAppResponse)(nil),        // 38: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse
	(*GetRegistrationInvitationsByAppInviterRequest)(nil),  // 39: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterRequest
	(*GetRegistrationInvitationsByAppInviterResponse)(nil), // 40: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse
	(*GetRegistrationInvitationByAppInviteeRequest)(nil),   // 41: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeRequest
	(*GetRegistrationInvitationByAppInviteeResponse)(nil),  // 42: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse
	(*UserInvitationCode)(nil),                             // 43: cloud.hashing.inspire.v1.UserInvitationCode
	(*CreateUserInvitationCodeRequest)(nil),                // 44: cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest
	(*CreateUserInvitationCodeResponse)(nil),               // 45: cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse
	(*GetUserInvitationCodeRequest)(nil),                   // 46: cloud.hashing.inspire.v1.GetUserInvitationCodeRequest
	(*GetUserInvitationCodeResponse)(nil),                  // 47: cloud.hashing.inspire.v1.GetUserInvitationCodeResponse
	(*GetUserInvitationCodeByAppUserRequest)(nil),          // 48: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserRequest
	(*GetUserInvitationCodeByAppUserResponse)(nil),         // 49: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse
	(*GetUserInvitationCodeByCodeRequest)(nil),             // 50: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeRequest
	(*GetUserInvitationCodeByCodeResponse)(nil),            // 51: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse
	(*CouponAllocated)(nil),                                // 52: cloud.hashing.inspire.v1.CouponAllocated
	(*CreateCouponAllocatedRequest)(nil),                   // 53: cloud.hashing.inspire.v1.CreateCouponAllocatedRequest
	(*CreateCouponAllocatedResponse)(nil),                  // 54: cloud.hashing.inspire.v1.CreateCouponAllocatedResponse
	(*GetCouponAllocatedRequest)(nil),                      // 55: cloud.hashing.inspire.v1.GetCouponAllocatedRequest
	(*GetCouponAllocatedResponse)(nil),                     // 56: cloud.hashing.inspire.v1.GetCouponAllocatedResponse
	(*GetCouponsAllocatedByAppRequest)(nil),                // 57: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppRequest
	(*GetCouponsAllocatedByAppResponse)(nil),               // 58: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse
	(*GetCouponsAllocatedByAppUserRequest)(nil),            // 59: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserRequest
	(*GetCouponsAllocatedByAppUserResponse)(nil),           // 60: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse
	(*UpdateCouponAllocatedRequest)(nil),                   // 61: cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest
	(*UpdateCouponAllocatedResponse)(nil),                  // 62: cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse
	(*CouponPool)(nil),                                     // 63: cloud.hashing.inspire.v1.CouponPool
	(*CreateCouponPoolRequest)(nil),                        // 64: cloud.hashing.inspire.v1.CreateCouponPoolRequest
	(*CreateCouponPoolResponse)(nil),                       // 65: cloud.hashing.inspire.v1.CreateCouponPoolResponse
	(*UpdateCouponPoolRequest)(nil),                        // 66: cloud.hashing.inspire.v1.UpdateCouponPoolRequest
	(*UpdateCouponPoolResponse)(nil),                       // 67: cloud.hashing.inspire.v1.UpdateCouponPoolResponse
	(*GetCouponPoolRequest)(nil),                           // 68: cloud.hashing.inspire.v1.GetCouponPoolRequest
	(*GetCouponPoolResponse)(nil),                          // 69: cloud.hashing.inspire.v1.GetCouponPoolResponse
	(*GetCouponPoolsByAppRequest)(nil),                     // 70: cloud.hashing.inspire.v1.GetCouponPoolsByAppRequest
	(*GetCouponPoolsByAppResponse)(nil),                    // 71: cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse
	(*GetCouponPoolsByAppReleaserRequest)(nil),             // 72: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserRequest
	(*GetCouponPoolsByAppReleaserResponse)(nil),            // 73: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse
	(*AppCouponSetting)(nil),                               // 74: cloud.hashing.inspire.v1.AppCouponSetting
	(*CreateAppCouponSettingRequest)(nil),                  // 75: cloud.hashing.inspire.v1.CreateAppCouponSettingRequest
	(*CreateAppCouponSettingResponse)(nil),                 // 76: cloud.hashing.inspire.v1.CreateAppCouponSettingResponse
	(*GetAppCouponSettingRequest)(nil),                     // 77: cloud.hashing.inspire.v1.GetAppCouponSettingRequest
	(*GetAppCouponSettingResponse)(nil),                    // 78: cloud.hashing.inspire.v1.GetAppCouponSettingResponse
	(*GetAppCouponSettingByAppRequest)(nil),                // 79: cloud.hashing.inspire.v1.GetAppCouponSettingByAppRequest
	(*GetAppCouponSettingByAppResponse)(nil),               // 80: cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse
	(*UpdateAppCouponSettingRequest)(nil),                  // 81: cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest
	(*UpdateAppCouponSettingResponse)(nil),                 // 82: cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse
	(*DefaultKpiSetting)(nil),                              // 83: cloud.hashing.inspire.v1.DefaultKpiSetting
	(*CreateDefaultKpiSettingRequest)(nil),                 // 84: cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest
	(*CreateDefaultKpiSettingResponse)(nil),                // 85: cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse
	(*GetDefaultKpiSettingRequest)(nil),                    // 86: cloud.hashing.inspire.v1.GetDefaultKpiSettingRequest
	(*GetDefaultKpiSettingResponse)(nil),                   // 87: cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse
	(*GetDefaultKpiSettingByAppGoodRequest)(nil),           // 88: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodRequest
	(*GetDefaultKpiSettingByAppGoodResponse)(nil),          // 89: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse
	(*UpdateDefaultKpiSettingRequest)(nil),                 // 90: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest
	(*UpdateDefaultKpiSettingResponse)(nil),                // 91: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse
	(*UserKpiSetting)(nil),                                 // 92: cloud.hashing.inspire.v1.UserKpiSetting
	(*CreateUserKpiSettingRequest)(nil),                    // 93: cloud.hashing.inspire.v1.CreateUserKpiSettingRequest
	(*CreateUserKpiSettingResponse)(nil),                   // 94: cloud.hashing.inspire.v1.CreateUserKpiSettingResponse
	(*GetUserKpiSettingRequest)(nil),                       // 95: cloud.hashing.inspire.v1.GetUserKpiSettingRequest
	(*GetUserKpiSettingResponse)(nil),                      // 96: cloud.hashing.inspire.v1.GetUserKpiSettingResponse
	(*GetUserKpiSettingByAppGoodRequest)(nil),              // 97: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodRequest
	(*GetUserKpiSettingByAppGoodResponse)(nil),             // 98: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse
	(*UpdateUserKpiSettingRequest)(nil),                    // 99: cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest
	(*UpdateUserKpiSettingResponse)(nil),                   // 100: cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse
	(*emptypb.Empty)(nil),                                  // 101: google.protobuf.Empty
}
var file_npool_cloud_hashing_inspire_proto_depIdxs = []int32{
	1,   // 0: cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	1,   // 1: cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	1,   // 2: cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	1,   // 3: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	1,   // 4: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	1,   // 5: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	10,  // 6: cloud.hashing.inspire.v1.CreateAgencySettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	10,  // 7: cloud.hashing.inspire.v1.CreateAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	10,  // 8: cloud.hashing.inspire.v1.GetAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	10,  // 9: cloud.hashing.inspire.v1.GetAgencySettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	10,  // 10: cloud.hashing.inspire.v1.UpdateAgencySettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	10,  // 11: cloud.hashing.inspire.v1.UpdateAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	19,  // 12: cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 13: cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 14: cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 15: cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 16: cloud.hashing.inspire.v1.GetPurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 17: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	19,  // 18: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	30,  // 19: cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 20: cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 21: cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 22: cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 23: cloud.hashing.inspire.v1.GetRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 24: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 25: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse.Infos:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	30,  // 26: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	43,  // 27: cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	43,  // 28: cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	43,  // 29: cloud.hashing.inspire.v1.GetUserInvitationCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	43,  // 30: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	43,  // 31: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	52,  // 32: cloud.hashing.inspire.v1.CreateCouponAllocatedRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 33: cloud.hashing.inspire.v1.CreateCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 34: cloud.hashing.inspire.v1.GetCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 35: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 36: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 37: cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	52,  // 38: cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	63,  // 39: cloud.hashing.inspire.v1.CreateCouponPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 40: cloud.hashing.inspire.v1.CreateCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 41: cloud.hashing.inspire.v1.UpdateCouponPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 42: cloud.hashing.inspire.v1.UpdateCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 43: cloud.hashing.inspire.v1.GetCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 44: cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	63,  // 45: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	74,  // 46: cloud.hashing.inspire.v1.CreateAppCouponSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	74,  // 47: cloud.hashing.inspire.v1.CreateAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	74,  // 48: cloud.hashing.inspire.v1.GetAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	74,  // 49: cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	74,  // 50: cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	74,  // 51: cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	83,  // 52: cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	83,  // 53: cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	83,  // 54: cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	83,  // 55: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	83,  // 56: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	83,  // 57: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	92,  // 58: cloud.hashing.inspire.v1.CreateUserKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	92,  // 59: cloud.hashing.inspire.v1.CreateUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	92,  // 60: cloud.hashing.inspire.v1.GetUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	92,  // 61: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	92,  // 62: cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	92,  // 63: cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	101, // 64: cloud.hashing.inspire.v1.CloudHashingInspire.Version:input_type -> google.protobuf.Empty
	2,   // 65: cloud.hashing.inspire.v1.CloudHashingInspire.CreateNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest
	4,   // 66: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingRequest
	6,   // 67: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingByApp:input_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppRequest
	8,   // 68: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest
	11,  // 69: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAgencySetting:input_type -> cloud.hashing.inspire.v1.CreateAgencySettingRequest
	13,  // 70: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySetting:input_type -> cloud.hashing.inspire.v1.GetAgencySettingRequest
	15,  // 71: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingByApp:input_type -> cloud.hashing.inspire.v1.GetAgencySettingByAppRequest
	17,  // 72: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAgencySetting:input_type -> cloud.hashing.inspire.v1.UpdateAgencySettingRequest
	20,  // 73: cloud.hashing.inspire.v1.CloudHashingInspire.CreatePurchaseInvitation:input_type -> cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest
	22,  // 74: cloud.hashing.inspire.v1.CloudHashingInspire.UpdatePurchaseInvitation:input_type -> cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest
	24,  // 75: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitation:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationRequest
	26,  // 76: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationsByApp:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppRequest
	28,  // 77: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationByAppOrder:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderRequest
	31,  // 78: cloud.hashing.inspire.v1.CloudHashingInspire.CreateRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest
	33,  // 79: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest
	35,  // 80: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationRequest
	37,  // 81: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByApp:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppRequest
	39,  // 82: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByAppInviter:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterRequest
	41,  // 83: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationByAppInvitee:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeRequest
	44,  // 84: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCode:input_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest
	46,  // 85: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCode:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeRequest
	48,  // 86: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByAppUser:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserRequest
	50,  // 87: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByCode:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeRequest
	53,  // 88: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponAllocated:input_type -> cloud.hashing.inspire.v1.CreateCouponAllocatedRequest
	55,  // 89: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocated:input_type -> cloud.hashing.inspire.v1.GetCouponAllocatedRequest
	57,  // 90: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByApp:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppRequest
	59,  // 91: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByAppUser:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserRequest
	61,  // 92: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponAllocated:input_type -> cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest
	64,  // 93: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPool:input_type -> cloud.hashing.inspire.v1.CreateCouponPoolRequest
	66,  // 94: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponPool:input_type -> cloud.hashing.inspire.v1.UpdateCouponPoolRequest
	68,  // 95: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPool:input_type -> cloud.hashing.inspire.v1.GetCouponPoolRequest
	70,  // 96: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByApp:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppRequest
	72,  // 97: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByAppReleaser:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserRequest
	75,  // 98: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAppCouponSetting:input_type -> cloud.hashing.inspire.v1.CreateAppCouponSettingRequest
	77,  // 99: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSetting:input_type -> cloud.hashing.inspire.v1.GetAppCouponSettingRequest
	79,  // 100: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSettingByApp:input_type -> cloud.hashing.inspire.v1.GetAppCouponSettingByAppRequest
	81,  // 101: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAppCouponSetting:input_type -> cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest
	84,  // 102: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest
	86,  // 103: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingRequest
	88,  // 104: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSettingByAppGood:input_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodRequest
	90,  // 105: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest
	93,  // 106: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserKpiSetting:input_type -> cloud.hashing.inspire.v1.CreateUserKpiSettingRequest
	95,  // 107: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSetting:input_type -> cloud.hashing.inspire.v1.GetUserKpiSettingRequest
	97,  // 108: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSettingByAppGood:input_type -> cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodRequest
	99,  // 109: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserKpiSetting:input_type -> cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest
	0,   // 110: cloud.hashing.inspire.v1.CloudHashingInspire.Version:output_type -> cloud.hashing.inspire.v1.VersionResponse
	3,   // 111: cloud.hashing.inspire.v1.CloudHashingInspire.CreateNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse
	5,   // 112: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse
	7,   // 113: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingByApp:output_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse
	9,   // 114: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse
	12,  // 115: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAgencySetting:output_type -> cloud.hashing.inspire.v1.CreateAgencySettingResponse
	14,  // 116: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySetting:output_type -> cloud.hashing.inspire.v1.GetAgencySettingResponse
	16,  // 117: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingByApp:output_type -> cloud.hashing.inspire.v1.GetAgencySettingByAppResponse
	18,  // 118: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAgencySetting:output_type -> cloud.hashing.inspire.v1.UpdateAgencySettingResponse
	21,  // 119: cloud.hashing.inspire.v1.CloudHashingInspire.CreatePurchaseInvitation:output_type -> cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse
	23,  // 120: cloud.hashing.inspire.v1.CloudHashingInspire.UpdatePurchaseInvitation:output_type -> cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse
	25,  // 121: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitation:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationResponse
	27,  // 122: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationsByApp:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse
	29,  // 123: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationByAppOrder:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse
	32,  // 124: cloud.hashing.inspire.v1.CloudHashingInspire.CreateRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse
	34,  // 125: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse
	36,  // 126: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationResponse
	38,  // 127: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByApp:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse
	40,  // 128: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByAppInviter:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse
	42,  // 129: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationByAppInvitee:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse
	45,  // 130: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCode:output_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse
	47,  // 131: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCode:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeResponse
	49,  // 132: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByAppUser:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse
	51,  // 133: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByCode:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse
	54,  // 134: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponAllocated:output_type -> cloud.hashing.inspire.v1.CreateCouponAllocatedResponse
	56,  // 135: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocated:output_type -> cloud.hashing.inspire.v1.GetCouponAllocatedResponse
	58,  // 136: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByApp:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse
	60,  // 137: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByAppUser:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse
	62,  // 138: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponAllocated:output_type -> cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse
	65,  // 139: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPool:output_type -> cloud.hashing.inspire.v1.CreateCouponPoolResponse
	67,  // 140: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponPool:output_type -> cloud.hashing.inspire.v1.UpdateCouponPoolResponse
	69,  // 141: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPool:output_type -> cloud.hashing.inspire.v1.GetCouponPoolResponse
	71,  // 142: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByApp:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse
	73,  // 143: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByAppReleaser:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse
	76,  // 144: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAppCouponSetting:output_type -> cloud.hashing.inspire.v1.CreateAppCouponSettingResponse
	78,  // 145: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSetting:output_type -> cloud.hashing.inspire.v1.GetAppCouponSettingResponse
	80,  // 146: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSettingByApp:output_type -> cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse
	82,  // 147: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAppCouponSetting:output_type -> cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse
	85,  // 148: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse
	87,  // 149: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse
	89,  // 150: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSettingByAppGood:output_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse
	91,  // 151: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse
	94,  // 152: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserKpiSetting:output_type -> cloud.hashing.inspire.v1.CreateUserKpiSettingResponse
	96,  // 153: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSetting:output_type -> cloud.hashing.inspire.v1.GetUserKpiSettingResponse
	98,  // 154: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSettingByAppGood:output_type -> cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse
	100, // 155: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserKpiSetting:output_type -> cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse
	110, // [110:156] is the sub-list for method output_type
	64,  // [64:110] is the sub-list for method input_type
	64,  // [64:64] is the sub-list for extension type_name
	64,  // [64:64] is the sub-list for extension extendee
	0,   // [0:64] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_inspire_proto_init() }
func file_npool_cloud_hashing_inspire_proto_init() {
	if File_npool_cloud_hashing_inspire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_inspire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserRewardSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationByAppOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationByAppOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppInviterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppInviterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationByAppInviteeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationByAppInviteeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvitationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponAllocated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppReleaserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppReleaserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCouponSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultKpiSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingByAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingByAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserKpiSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingByAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingByAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_inspire_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_inspire_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_inspire_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_inspire_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_inspire_proto = out.File
	file_npool_cloud_hashing_inspire_proto_rawDesc = nil
	file_npool_cloud_hashing_inspire_proto_goTypes = nil
	file_npool_cloud_hashing_inspire_proto_depIdxs = nil
}
