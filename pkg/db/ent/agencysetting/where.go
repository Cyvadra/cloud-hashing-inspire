// Code generated by entc, DO NOT EDIT.

package agencysetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// RegistrationRewardThreshold applies equality check predicate on the "registration_reward_threshold" field. It's identical to RegistrationRewardThresholdEQ.
func RegistrationRewardThreshold(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardAmount applies equality check predicate on the "registration_reward_amount" field. It's identical to RegistrationRewardAmountEQ.
func RegistrationRewardAmount(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationRewardAmount), v))
	})
}

// KycRewardThreshold applies equality check predicate on the "kyc_reward_threshold" field. It's identical to KycRewardThresholdEQ.
func KycRewardThreshold(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardAmount applies equality check predicate on the "kyc_reward_amount" field. It's identical to KycRewardAmountEQ.
func KycRewardAmount(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycRewardAmount), v))
	})
}

// PurchaseRewardPercent applies equality check predicate on the "purchase_reward_percent" field. It's identical to PurchaseRewardPercentEQ.
func PurchaseRewardPercent(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardChainLevels applies equality check predicate on the "purchase_reward_chain_levels" field. It's identical to PurchaseRewardChainLevelsEQ.
func PurchaseRewardChainLevels(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// RegistrationRewardThresholdEQ applies the EQ predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardThresholdNEQ applies the NEQ predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardThresholdIn applies the In predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegistrationRewardThreshold), v...))
	})
}

// RegistrationRewardThresholdNotIn applies the NotIn predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegistrationRewardThreshold), v...))
	})
}

// RegistrationRewardThresholdGT applies the GT predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardThresholdGTE applies the GTE predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardThresholdLT applies the LT predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardThresholdLTE applies the LTE predicate on the "registration_reward_threshold" field.
func RegistrationRewardThresholdLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationRewardThreshold), v))
	})
}

// RegistrationRewardAmountEQ applies the EQ predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegistrationRewardAmount), v))
	})
}

// RegistrationRewardAmountNEQ applies the NEQ predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegistrationRewardAmount), v))
	})
}

// RegistrationRewardAmountIn applies the In predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegistrationRewardAmount), v...))
	})
}

// RegistrationRewardAmountNotIn applies the NotIn predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegistrationRewardAmount), v...))
	})
}

// RegistrationRewardAmountGT applies the GT predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegistrationRewardAmount), v))
	})
}

// RegistrationRewardAmountGTE applies the GTE predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegistrationRewardAmount), v))
	})
}

// RegistrationRewardAmountLT applies the LT predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegistrationRewardAmount), v))
	})
}

// RegistrationRewardAmountLTE applies the LTE predicate on the "registration_reward_amount" field.
func RegistrationRewardAmountLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegistrationRewardAmount), v))
	})
}

// KycRewardThresholdEQ applies the EQ predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardThresholdNEQ applies the NEQ predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardThresholdIn applies the In predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKycRewardThreshold), v...))
	})
}

// KycRewardThresholdNotIn applies the NotIn predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKycRewardThreshold), v...))
	})
}

// KycRewardThresholdGT applies the GT predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardThresholdGTE applies the GTE predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardThresholdLT applies the LT predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardThresholdLTE applies the LTE predicate on the "kyc_reward_threshold" field.
func KycRewardThresholdLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKycRewardThreshold), v))
	})
}

// KycRewardAmountEQ applies the EQ predicate on the "kyc_reward_amount" field.
func KycRewardAmountEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKycRewardAmount), v))
	})
}

// KycRewardAmountNEQ applies the NEQ predicate on the "kyc_reward_amount" field.
func KycRewardAmountNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKycRewardAmount), v))
	})
}

// KycRewardAmountIn applies the In predicate on the "kyc_reward_amount" field.
func KycRewardAmountIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKycRewardAmount), v...))
	})
}

// KycRewardAmountNotIn applies the NotIn predicate on the "kyc_reward_amount" field.
func KycRewardAmountNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKycRewardAmount), v...))
	})
}

// KycRewardAmountGT applies the GT predicate on the "kyc_reward_amount" field.
func KycRewardAmountGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKycRewardAmount), v))
	})
}

// KycRewardAmountGTE applies the GTE predicate on the "kyc_reward_amount" field.
func KycRewardAmountGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKycRewardAmount), v))
	})
}

// KycRewardAmountLT applies the LT predicate on the "kyc_reward_amount" field.
func KycRewardAmountLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKycRewardAmount), v))
	})
}

// KycRewardAmountLTE applies the LTE predicate on the "kyc_reward_amount" field.
func KycRewardAmountLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKycRewardAmount), v))
	})
}

// PurchaseRewardPercentEQ applies the EQ predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardPercentNEQ applies the NEQ predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardPercentIn applies the In predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPurchaseRewardPercent), v...))
	})
}

// PurchaseRewardPercentNotIn applies the NotIn predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPurchaseRewardPercent), v...))
	})
}

// PurchaseRewardPercentGT applies the GT predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardPercentGTE applies the GTE predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardPercentLT applies the LT predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardPercentLTE applies the LTE predicate on the "purchase_reward_percent" field.
func PurchaseRewardPercentLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurchaseRewardPercent), v))
	})
}

// PurchaseRewardChainLevelsEQ applies the EQ predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// PurchaseRewardChainLevelsNEQ applies the NEQ predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsNEQ(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// PurchaseRewardChainLevelsIn applies the In predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPurchaseRewardChainLevels), v...))
	})
}

// PurchaseRewardChainLevelsNotIn applies the NotIn predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsNotIn(vs ...int) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPurchaseRewardChainLevels), v...))
	})
}

// PurchaseRewardChainLevelsGT applies the GT predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsGT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// PurchaseRewardChainLevelsGTE applies the GTE predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsGTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// PurchaseRewardChainLevelsLT applies the LT predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsLT(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// PurchaseRewardChainLevelsLTE applies the LTE predicate on the "purchase_reward_chain_levels" field.
func PurchaseRewardChainLevelsLTE(v int) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPurchaseRewardChainLevels), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.AgencySetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgencySetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgencySetting) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgencySetting) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgencySetting) predicate.AgencySetting {
	return predicate.AgencySetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
