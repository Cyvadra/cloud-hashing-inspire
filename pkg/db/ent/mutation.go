// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/agencysetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/newuserrewardsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/purchaseinvitation"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/registrationinvitation"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAgencySetting          = "AgencySetting"
	TypeAppCouponSetting       = "AppCouponSetting"
	TypeCouponAllocated        = "CouponAllocated"
	TypeCouponPool             = "CouponPool"
	TypeNewUserRewardSetting   = "NewUserRewardSetting"
	TypePurchaseInvitation     = "PurchaseInvitation"
	TypeRegistrationInvitation = "RegistrationInvitation"
	TypeUserInvitationCode     = "UserInvitationCode"
)

// AgencySettingMutation represents an operation that mutates the AgencySetting nodes in the graph.
type AgencySettingMutation struct {
	config
	op                               Op
	typ                              string
	id                               *uuid.UUID
	app_id                           *uuid.UUID
	registration_reward_threshold    *int
	addregistration_reward_threshold *int
	registration_reward_amount       *int
	addregistration_reward_amount    *int
	kyc_reward_threshold             *int
	addkyc_reward_threshold          *int
	kyc_reward_amount                *int
	addkyc_reward_amount             *int
	purchase_reward_percent          *int
	addpurchase_reward_percent       *int
	purchase_reward_chain_levels     *int
	addpurchase_reward_chain_levels  *int
	create_at                        *uint32
	addcreate_at                     *uint32
	update_at                        *uint32
	addupdate_at                     *uint32
	delete_at                        *uint32
	adddelete_at                     *uint32
	clearedFields                    map[string]struct{}
	done                             bool
	oldValue                         func(context.Context) (*AgencySetting, error)
	predicates                       []predicate.AgencySetting
}

var _ ent.Mutation = (*AgencySettingMutation)(nil)

// agencysettingOption allows management of the mutation configuration using functional options.
type agencysettingOption func(*AgencySettingMutation)

// newAgencySettingMutation creates new mutation for the AgencySetting entity.
func newAgencySettingMutation(c config, op Op, opts ...agencysettingOption) *AgencySettingMutation {
	m := &AgencySettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAgencySetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAgencySettingID sets the ID field of the mutation.
func withAgencySettingID(id uuid.UUID) agencysettingOption {
	return func(m *AgencySettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AgencySetting
		)
		m.oldValue = func(ctx context.Context) (*AgencySetting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AgencySetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAgencySetting sets the old AgencySetting of the mutation.
func withAgencySetting(node *AgencySetting) agencysettingOption {
	return func(m *AgencySettingMutation) {
		m.oldValue = func(context.Context) (*AgencySetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AgencySettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AgencySettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AgencySetting entities.
func (m *AgencySettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AgencySettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *AgencySettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AgencySettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AgencySettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetRegistrationRewardThreshold sets the "registration_reward_threshold" field.
func (m *AgencySettingMutation) SetRegistrationRewardThreshold(i int) {
	m.registration_reward_threshold = &i
	m.addregistration_reward_threshold = nil
}

// RegistrationRewardThreshold returns the value of the "registration_reward_threshold" field in the mutation.
func (m *AgencySettingMutation) RegistrationRewardThreshold() (r int, exists bool) {
	v := m.registration_reward_threshold
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationRewardThreshold returns the old "registration_reward_threshold" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldRegistrationRewardThreshold(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegistrationRewardThreshold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegistrationRewardThreshold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationRewardThreshold: %w", err)
	}
	return oldValue.RegistrationRewardThreshold, nil
}

// AddRegistrationRewardThreshold adds i to the "registration_reward_threshold" field.
func (m *AgencySettingMutation) AddRegistrationRewardThreshold(i int) {
	if m.addregistration_reward_threshold != nil {
		*m.addregistration_reward_threshold += i
	} else {
		m.addregistration_reward_threshold = &i
	}
}

// AddedRegistrationRewardThreshold returns the value that was added to the "registration_reward_threshold" field in this mutation.
func (m *AgencySettingMutation) AddedRegistrationRewardThreshold() (r int, exists bool) {
	v := m.addregistration_reward_threshold
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegistrationRewardThreshold resets all changes to the "registration_reward_threshold" field.
func (m *AgencySettingMutation) ResetRegistrationRewardThreshold() {
	m.registration_reward_threshold = nil
	m.addregistration_reward_threshold = nil
}

// SetRegistrationRewardAmount sets the "registration_reward_amount" field.
func (m *AgencySettingMutation) SetRegistrationRewardAmount(i int) {
	m.registration_reward_amount = &i
	m.addregistration_reward_amount = nil
}

// RegistrationRewardAmount returns the value of the "registration_reward_amount" field in the mutation.
func (m *AgencySettingMutation) RegistrationRewardAmount() (r int, exists bool) {
	v := m.registration_reward_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationRewardAmount returns the old "registration_reward_amount" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldRegistrationRewardAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegistrationRewardAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegistrationRewardAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationRewardAmount: %w", err)
	}
	return oldValue.RegistrationRewardAmount, nil
}

// AddRegistrationRewardAmount adds i to the "registration_reward_amount" field.
func (m *AgencySettingMutation) AddRegistrationRewardAmount(i int) {
	if m.addregistration_reward_amount != nil {
		*m.addregistration_reward_amount += i
	} else {
		m.addregistration_reward_amount = &i
	}
}

// AddedRegistrationRewardAmount returns the value that was added to the "registration_reward_amount" field in this mutation.
func (m *AgencySettingMutation) AddedRegistrationRewardAmount() (r int, exists bool) {
	v := m.addregistration_reward_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegistrationRewardAmount resets all changes to the "registration_reward_amount" field.
func (m *AgencySettingMutation) ResetRegistrationRewardAmount() {
	m.registration_reward_amount = nil
	m.addregistration_reward_amount = nil
}

// SetKycRewardThreshold sets the "kyc_reward_threshold" field.
func (m *AgencySettingMutation) SetKycRewardThreshold(i int) {
	m.kyc_reward_threshold = &i
	m.addkyc_reward_threshold = nil
}

// KycRewardThreshold returns the value of the "kyc_reward_threshold" field in the mutation.
func (m *AgencySettingMutation) KycRewardThreshold() (r int, exists bool) {
	v := m.kyc_reward_threshold
	if v == nil {
		return
	}
	return *v, true
}

// OldKycRewardThreshold returns the old "kyc_reward_threshold" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldKycRewardThreshold(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKycRewardThreshold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKycRewardThreshold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKycRewardThreshold: %w", err)
	}
	return oldValue.KycRewardThreshold, nil
}

// AddKycRewardThreshold adds i to the "kyc_reward_threshold" field.
func (m *AgencySettingMutation) AddKycRewardThreshold(i int) {
	if m.addkyc_reward_threshold != nil {
		*m.addkyc_reward_threshold += i
	} else {
		m.addkyc_reward_threshold = &i
	}
}

// AddedKycRewardThreshold returns the value that was added to the "kyc_reward_threshold" field in this mutation.
func (m *AgencySettingMutation) AddedKycRewardThreshold() (r int, exists bool) {
	v := m.addkyc_reward_threshold
	if v == nil {
		return
	}
	return *v, true
}

// ResetKycRewardThreshold resets all changes to the "kyc_reward_threshold" field.
func (m *AgencySettingMutation) ResetKycRewardThreshold() {
	m.kyc_reward_threshold = nil
	m.addkyc_reward_threshold = nil
}

// SetKycRewardAmount sets the "kyc_reward_amount" field.
func (m *AgencySettingMutation) SetKycRewardAmount(i int) {
	m.kyc_reward_amount = &i
	m.addkyc_reward_amount = nil
}

// KycRewardAmount returns the value of the "kyc_reward_amount" field in the mutation.
func (m *AgencySettingMutation) KycRewardAmount() (r int, exists bool) {
	v := m.kyc_reward_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldKycRewardAmount returns the old "kyc_reward_amount" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldKycRewardAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKycRewardAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKycRewardAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKycRewardAmount: %w", err)
	}
	return oldValue.KycRewardAmount, nil
}

// AddKycRewardAmount adds i to the "kyc_reward_amount" field.
func (m *AgencySettingMutation) AddKycRewardAmount(i int) {
	if m.addkyc_reward_amount != nil {
		*m.addkyc_reward_amount += i
	} else {
		m.addkyc_reward_amount = &i
	}
}

// AddedKycRewardAmount returns the value that was added to the "kyc_reward_amount" field in this mutation.
func (m *AgencySettingMutation) AddedKycRewardAmount() (r int, exists bool) {
	v := m.addkyc_reward_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetKycRewardAmount resets all changes to the "kyc_reward_amount" field.
func (m *AgencySettingMutation) ResetKycRewardAmount() {
	m.kyc_reward_amount = nil
	m.addkyc_reward_amount = nil
}

// SetPurchaseRewardPercent sets the "purchase_reward_percent" field.
func (m *AgencySettingMutation) SetPurchaseRewardPercent(i int) {
	m.purchase_reward_percent = &i
	m.addpurchase_reward_percent = nil
}

// PurchaseRewardPercent returns the value of the "purchase_reward_percent" field in the mutation.
func (m *AgencySettingMutation) PurchaseRewardPercent() (r int, exists bool) {
	v := m.purchase_reward_percent
	if v == nil {
		return
	}
	return *v, true
}

// OldPurchaseRewardPercent returns the old "purchase_reward_percent" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldPurchaseRewardPercent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPurchaseRewardPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPurchaseRewardPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPurchaseRewardPercent: %w", err)
	}
	return oldValue.PurchaseRewardPercent, nil
}

// AddPurchaseRewardPercent adds i to the "purchase_reward_percent" field.
func (m *AgencySettingMutation) AddPurchaseRewardPercent(i int) {
	if m.addpurchase_reward_percent != nil {
		*m.addpurchase_reward_percent += i
	} else {
		m.addpurchase_reward_percent = &i
	}
}

// AddedPurchaseRewardPercent returns the value that was added to the "purchase_reward_percent" field in this mutation.
func (m *AgencySettingMutation) AddedPurchaseRewardPercent() (r int, exists bool) {
	v := m.addpurchase_reward_percent
	if v == nil {
		return
	}
	return *v, true
}

// ResetPurchaseRewardPercent resets all changes to the "purchase_reward_percent" field.
func (m *AgencySettingMutation) ResetPurchaseRewardPercent() {
	m.purchase_reward_percent = nil
	m.addpurchase_reward_percent = nil
}

// SetPurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field.
func (m *AgencySettingMutation) SetPurchaseRewardChainLevels(i int) {
	m.purchase_reward_chain_levels = &i
	m.addpurchase_reward_chain_levels = nil
}

// PurchaseRewardChainLevels returns the value of the "purchase_reward_chain_levels" field in the mutation.
func (m *AgencySettingMutation) PurchaseRewardChainLevels() (r int, exists bool) {
	v := m.purchase_reward_chain_levels
	if v == nil {
		return
	}
	return *v, true
}

// OldPurchaseRewardChainLevels returns the old "purchase_reward_chain_levels" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldPurchaseRewardChainLevels(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPurchaseRewardChainLevels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPurchaseRewardChainLevels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPurchaseRewardChainLevels: %w", err)
	}
	return oldValue.PurchaseRewardChainLevels, nil
}

// AddPurchaseRewardChainLevels adds i to the "purchase_reward_chain_levels" field.
func (m *AgencySettingMutation) AddPurchaseRewardChainLevels(i int) {
	if m.addpurchase_reward_chain_levels != nil {
		*m.addpurchase_reward_chain_levels += i
	} else {
		m.addpurchase_reward_chain_levels = &i
	}
}

// AddedPurchaseRewardChainLevels returns the value that was added to the "purchase_reward_chain_levels" field in this mutation.
func (m *AgencySettingMutation) AddedPurchaseRewardChainLevels() (r int, exists bool) {
	v := m.addpurchase_reward_chain_levels
	if v == nil {
		return
	}
	return *v, true
}

// ResetPurchaseRewardChainLevels resets all changes to the "purchase_reward_chain_levels" field.
func (m *AgencySettingMutation) ResetPurchaseRewardChainLevels() {
	m.purchase_reward_chain_levels = nil
	m.addpurchase_reward_chain_levels = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AgencySettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AgencySettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AgencySettingMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AgencySettingMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AgencySettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AgencySettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AgencySettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AgencySettingMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AgencySettingMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AgencySettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AgencySettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AgencySettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AgencySetting entity.
// If the AgencySetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgencySettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AgencySettingMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AgencySettingMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AgencySettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AgencySettingMutation builder.
func (m *AgencySettingMutation) Where(ps ...predicate.AgencySetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AgencySettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AgencySetting).
func (m *AgencySettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AgencySettingMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, agencysetting.FieldAppID)
	}
	if m.registration_reward_threshold != nil {
		fields = append(fields, agencysetting.FieldRegistrationRewardThreshold)
	}
	if m.registration_reward_amount != nil {
		fields = append(fields, agencysetting.FieldRegistrationRewardAmount)
	}
	if m.kyc_reward_threshold != nil {
		fields = append(fields, agencysetting.FieldKycRewardThreshold)
	}
	if m.kyc_reward_amount != nil {
		fields = append(fields, agencysetting.FieldKycRewardAmount)
	}
	if m.purchase_reward_percent != nil {
		fields = append(fields, agencysetting.FieldPurchaseRewardPercent)
	}
	if m.purchase_reward_chain_levels != nil {
		fields = append(fields, agencysetting.FieldPurchaseRewardChainLevels)
	}
	if m.create_at != nil {
		fields = append(fields, agencysetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, agencysetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, agencysetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AgencySettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case agencysetting.FieldAppID:
		return m.AppID()
	case agencysetting.FieldRegistrationRewardThreshold:
		return m.RegistrationRewardThreshold()
	case agencysetting.FieldRegistrationRewardAmount:
		return m.RegistrationRewardAmount()
	case agencysetting.FieldKycRewardThreshold:
		return m.KycRewardThreshold()
	case agencysetting.FieldKycRewardAmount:
		return m.KycRewardAmount()
	case agencysetting.FieldPurchaseRewardPercent:
		return m.PurchaseRewardPercent()
	case agencysetting.FieldPurchaseRewardChainLevels:
		return m.PurchaseRewardChainLevels()
	case agencysetting.FieldCreateAt:
		return m.CreateAt()
	case agencysetting.FieldUpdateAt:
		return m.UpdateAt()
	case agencysetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AgencySettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case agencysetting.FieldAppID:
		return m.OldAppID(ctx)
	case agencysetting.FieldRegistrationRewardThreshold:
		return m.OldRegistrationRewardThreshold(ctx)
	case agencysetting.FieldRegistrationRewardAmount:
		return m.OldRegistrationRewardAmount(ctx)
	case agencysetting.FieldKycRewardThreshold:
		return m.OldKycRewardThreshold(ctx)
	case agencysetting.FieldKycRewardAmount:
		return m.OldKycRewardAmount(ctx)
	case agencysetting.FieldPurchaseRewardPercent:
		return m.OldPurchaseRewardPercent(ctx)
	case agencysetting.FieldPurchaseRewardChainLevels:
		return m.OldPurchaseRewardChainLevels(ctx)
	case agencysetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case agencysetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case agencysetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AgencySetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgencySettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case agencysetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case agencysetting.FieldRegistrationRewardThreshold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationRewardThreshold(v)
		return nil
	case agencysetting.FieldRegistrationRewardAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationRewardAmount(v)
		return nil
	case agencysetting.FieldKycRewardThreshold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKycRewardThreshold(v)
		return nil
	case agencysetting.FieldKycRewardAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKycRewardAmount(v)
		return nil
	case agencysetting.FieldPurchaseRewardPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPurchaseRewardPercent(v)
		return nil
	case agencysetting.FieldPurchaseRewardChainLevels:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPurchaseRewardChainLevels(v)
		return nil
	case agencysetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case agencysetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case agencysetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AgencySetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AgencySettingMutation) AddedFields() []string {
	var fields []string
	if m.addregistration_reward_threshold != nil {
		fields = append(fields, agencysetting.FieldRegistrationRewardThreshold)
	}
	if m.addregistration_reward_amount != nil {
		fields = append(fields, agencysetting.FieldRegistrationRewardAmount)
	}
	if m.addkyc_reward_threshold != nil {
		fields = append(fields, agencysetting.FieldKycRewardThreshold)
	}
	if m.addkyc_reward_amount != nil {
		fields = append(fields, agencysetting.FieldKycRewardAmount)
	}
	if m.addpurchase_reward_percent != nil {
		fields = append(fields, agencysetting.FieldPurchaseRewardPercent)
	}
	if m.addpurchase_reward_chain_levels != nil {
		fields = append(fields, agencysetting.FieldPurchaseRewardChainLevels)
	}
	if m.addcreate_at != nil {
		fields = append(fields, agencysetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, agencysetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, agencysetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AgencySettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case agencysetting.FieldRegistrationRewardThreshold:
		return m.AddedRegistrationRewardThreshold()
	case agencysetting.FieldRegistrationRewardAmount:
		return m.AddedRegistrationRewardAmount()
	case agencysetting.FieldKycRewardThreshold:
		return m.AddedKycRewardThreshold()
	case agencysetting.FieldKycRewardAmount:
		return m.AddedKycRewardAmount()
	case agencysetting.FieldPurchaseRewardPercent:
		return m.AddedPurchaseRewardPercent()
	case agencysetting.FieldPurchaseRewardChainLevels:
		return m.AddedPurchaseRewardChainLevels()
	case agencysetting.FieldCreateAt:
		return m.AddedCreateAt()
	case agencysetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case agencysetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgencySettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case agencysetting.FieldRegistrationRewardThreshold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegistrationRewardThreshold(v)
		return nil
	case agencysetting.FieldRegistrationRewardAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegistrationRewardAmount(v)
		return nil
	case agencysetting.FieldKycRewardThreshold:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKycRewardThreshold(v)
		return nil
	case agencysetting.FieldKycRewardAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKycRewardAmount(v)
		return nil
	case agencysetting.FieldPurchaseRewardPercent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPurchaseRewardPercent(v)
		return nil
	case agencysetting.FieldPurchaseRewardChainLevels:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPurchaseRewardChainLevels(v)
		return nil
	case agencysetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case agencysetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case agencysetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AgencySetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AgencySettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AgencySettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AgencySettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AgencySetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AgencySettingMutation) ResetField(name string) error {
	switch name {
	case agencysetting.FieldAppID:
		m.ResetAppID()
		return nil
	case agencysetting.FieldRegistrationRewardThreshold:
		m.ResetRegistrationRewardThreshold()
		return nil
	case agencysetting.FieldRegistrationRewardAmount:
		m.ResetRegistrationRewardAmount()
		return nil
	case agencysetting.FieldKycRewardThreshold:
		m.ResetKycRewardThreshold()
		return nil
	case agencysetting.FieldKycRewardAmount:
		m.ResetKycRewardAmount()
		return nil
	case agencysetting.FieldPurchaseRewardPercent:
		m.ResetPurchaseRewardPercent()
		return nil
	case agencysetting.FieldPurchaseRewardChainLevels:
		m.ResetPurchaseRewardChainLevels()
		return nil
	case agencysetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case agencysetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case agencysetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AgencySetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AgencySettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AgencySettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AgencySettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AgencySettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AgencySettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AgencySettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AgencySettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AgencySetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AgencySettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AgencySetting edge %s", name)
}

// AppCouponSettingMutation represents an operation that mutates the AppCouponSetting nodes in the graph.
type AppCouponSettingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	app_id              *uuid.UUID
	domination_limit    *int
	adddomination_limit *int
	total_limit         *int
	addtotal_limit      *int
	create_at           *uint32
	addcreate_at        *uint32
	update_at           *uint32
	addupdate_at        *uint32
	delete_at           *uint32
	adddelete_at        *uint32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*AppCouponSetting, error)
	predicates          []predicate.AppCouponSetting
}

var _ ent.Mutation = (*AppCouponSettingMutation)(nil)

// appcouponsettingOption allows management of the mutation configuration using functional options.
type appcouponsettingOption func(*AppCouponSettingMutation)

// newAppCouponSettingMutation creates new mutation for the AppCouponSetting entity.
func newAppCouponSettingMutation(c config, op Op, opts ...appcouponsettingOption) *AppCouponSettingMutation {
	m := &AppCouponSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppCouponSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppCouponSettingID sets the ID field of the mutation.
func withAppCouponSettingID(id uuid.UUID) appcouponsettingOption {
	return func(m *AppCouponSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppCouponSetting
		)
		m.oldValue = func(ctx context.Context) (*AppCouponSetting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppCouponSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppCouponSetting sets the old AppCouponSetting of the mutation.
func withAppCouponSetting(node *AppCouponSetting) appcouponsettingOption {
	return func(m *AppCouponSettingMutation) {
		m.oldValue = func(context.Context) (*AppCouponSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppCouponSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppCouponSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppCouponSetting entities.
func (m *AppCouponSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppCouponSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *AppCouponSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppCouponSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppCouponSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetDominationLimit sets the "domination_limit" field.
func (m *AppCouponSettingMutation) SetDominationLimit(i int) {
	m.domination_limit = &i
	m.adddomination_limit = nil
}

// DominationLimit returns the value of the "domination_limit" field in the mutation.
func (m *AppCouponSettingMutation) DominationLimit() (r int, exists bool) {
	v := m.domination_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldDominationLimit returns the old "domination_limit" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldDominationLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDominationLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDominationLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDominationLimit: %w", err)
	}
	return oldValue.DominationLimit, nil
}

// AddDominationLimit adds i to the "domination_limit" field.
func (m *AppCouponSettingMutation) AddDominationLimit(i int) {
	if m.adddomination_limit != nil {
		*m.adddomination_limit += i
	} else {
		m.adddomination_limit = &i
	}
}

// AddedDominationLimit returns the value that was added to the "domination_limit" field in this mutation.
func (m *AppCouponSettingMutation) AddedDominationLimit() (r int, exists bool) {
	v := m.adddomination_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetDominationLimit resets all changes to the "domination_limit" field.
func (m *AppCouponSettingMutation) ResetDominationLimit() {
	m.domination_limit = nil
	m.adddomination_limit = nil
}

// SetTotalLimit sets the "total_limit" field.
func (m *AppCouponSettingMutation) SetTotalLimit(i int) {
	m.total_limit = &i
	m.addtotal_limit = nil
}

// TotalLimit returns the value of the "total_limit" field in the mutation.
func (m *AppCouponSettingMutation) TotalLimit() (r int, exists bool) {
	v := m.total_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalLimit returns the old "total_limit" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldTotalLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTotalLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTotalLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalLimit: %w", err)
	}
	return oldValue.TotalLimit, nil
}

// AddTotalLimit adds i to the "total_limit" field.
func (m *AppCouponSettingMutation) AddTotalLimit(i int) {
	if m.addtotal_limit != nil {
		*m.addtotal_limit += i
	} else {
		m.addtotal_limit = &i
	}
}

// AddedTotalLimit returns the value that was added to the "total_limit" field in this mutation.
func (m *AppCouponSettingMutation) AddedTotalLimit() (r int, exists bool) {
	v := m.addtotal_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalLimit resets all changes to the "total_limit" field.
func (m *AppCouponSettingMutation) ResetTotalLimit() {
	m.total_limit = nil
	m.addtotal_limit = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppCouponSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppCouponSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppCouponSettingMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppCouponSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppCouponSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppCouponSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppCouponSettingMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppCouponSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppCouponSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppCouponSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppCouponSettingMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppCouponSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppCouponSettingMutation builder.
func (m *AppCouponSettingMutation) Where(ps ...predicate.AppCouponSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppCouponSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppCouponSetting).
func (m *AppCouponSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppCouponSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, appcouponsetting.FieldAppID)
	}
	if m.domination_limit != nil {
		fields = append(fields, appcouponsetting.FieldDominationLimit)
	}
	if m.total_limit != nil {
		fields = append(fields, appcouponsetting.FieldTotalLimit)
	}
	if m.create_at != nil {
		fields = append(fields, appcouponsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appcouponsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appcouponsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppCouponSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcouponsetting.FieldAppID:
		return m.AppID()
	case appcouponsetting.FieldDominationLimit:
		return m.DominationLimit()
	case appcouponsetting.FieldTotalLimit:
		return m.TotalLimit()
	case appcouponsetting.FieldCreateAt:
		return m.CreateAt()
	case appcouponsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appcouponsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppCouponSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcouponsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appcouponsetting.FieldDominationLimit:
		return m.OldDominationLimit(ctx)
	case appcouponsetting.FieldTotalLimit:
		return m.OldTotalLimit(ctx)
	case appcouponsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appcouponsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appcouponsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCouponSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcouponsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcouponsetting.FieldDominationLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDominationLimit(v)
		return nil
	case appcouponsetting.FieldTotalLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalLimit(v)
		return nil
	case appcouponsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appcouponsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appcouponsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppCouponSettingMutation) AddedFields() []string {
	var fields []string
	if m.adddomination_limit != nil {
		fields = append(fields, appcouponsetting.FieldDominationLimit)
	}
	if m.addtotal_limit != nil {
		fields = append(fields, appcouponsetting.FieldTotalLimit)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appcouponsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appcouponsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appcouponsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppCouponSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcouponsetting.FieldDominationLimit:
		return m.AddedDominationLimit()
	case appcouponsetting.FieldTotalLimit:
		return m.AddedTotalLimit()
	case appcouponsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appcouponsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appcouponsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCouponSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcouponsetting.FieldDominationLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDominationLimit(v)
		return nil
	case appcouponsetting.FieldTotalLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalLimit(v)
		return nil
	case appcouponsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appcouponsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appcouponsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppCouponSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppCouponSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppCouponSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppCouponSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppCouponSettingMutation) ResetField(name string) error {
	switch name {
	case appcouponsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appcouponsetting.FieldDominationLimit:
		m.ResetDominationLimit()
		return nil
	case appcouponsetting.FieldTotalLimit:
		m.ResetTotalLimit()
		return nil
	case appcouponsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appcouponsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appcouponsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppCouponSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppCouponSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppCouponSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppCouponSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppCouponSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppCouponSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppCouponSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppCouponSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppCouponSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppCouponSetting edge %s", name)
}

// CouponAllocatedMutation represents an operation that mutates the CouponAllocated nodes in the graph.
type CouponAllocatedMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	user_id       *uuid.UUID
	app_id        *uuid.UUID
	used          *bool
	coupon_id     *uuid.UUID
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CouponAllocated, error)
	predicates    []predicate.CouponAllocated
}

var _ ent.Mutation = (*CouponAllocatedMutation)(nil)

// couponallocatedOption allows management of the mutation configuration using functional options.
type couponallocatedOption func(*CouponAllocatedMutation)

// newCouponAllocatedMutation creates new mutation for the CouponAllocated entity.
func newCouponAllocatedMutation(c config, op Op, opts ...couponallocatedOption) *CouponAllocatedMutation {
	m := &CouponAllocatedMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponAllocated,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponAllocatedID sets the ID field of the mutation.
func withCouponAllocatedID(id uuid.UUID) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponAllocated
		)
		m.oldValue = func(ctx context.Context) (*CouponAllocated, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponAllocated.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponAllocated sets the old CouponAllocated of the mutation.
func withCouponAllocated(node *CouponAllocated) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		m.oldValue = func(context.Context) (*CouponAllocated, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponAllocatedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponAllocatedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponAllocated entities.
func (m *CouponAllocatedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponAllocatedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *CouponAllocatedMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CouponAllocatedMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CouponAllocatedMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponAllocatedMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponAllocatedMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponAllocatedMutation) ResetAppID() {
	m.app_id = nil
}

// SetUsed sets the "used" field.
func (m *CouponAllocatedMutation) SetUsed(b bool) {
	m.used = &b
}

// Used returns the value of the "used" field in the mutation.
func (m *CouponAllocatedMutation) Used() (r bool, exists bool) {
	v := m.used
	if v == nil {
		return
	}
	return *v, true
}

// OldUsed returns the old "used" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUsed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsed: %w", err)
	}
	return oldValue.Used, nil
}

// ResetUsed resets all changes to the "used" field.
func (m *CouponAllocatedMutation) ResetUsed() {
	m.used = nil
}

// SetCouponID sets the "coupon_id" field.
func (m *CouponAllocatedMutation) SetCouponID(u uuid.UUID) {
	m.coupon_id = &u
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *CouponAllocatedMutation) CouponID() (r uuid.UUID, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *CouponAllocatedMutation) ResetCouponID() {
	m.coupon_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CouponAllocatedMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CouponAllocatedMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CouponAllocatedMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CouponAllocatedMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CouponAllocatedMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CouponAllocatedMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CouponAllocatedMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CouponAllocatedMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CouponAllocatedMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CouponAllocatedMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CouponAllocatedMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CouponAllocatedMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Where(ps ...predicate.CouponAllocated) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponAllocatedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponAllocated).
func (m *CouponAllocatedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponAllocatedMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, couponallocated.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, couponallocated.FieldAppID)
	}
	if m.used != nil {
		fields = append(fields, couponallocated.FieldUsed)
	}
	if m.coupon_id != nil {
		fields = append(fields, couponallocated.FieldCouponID)
	}
	if m.create_at != nil {
		fields = append(fields, couponallocated.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, couponallocated.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, couponallocated.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponAllocatedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldUserID:
		return m.UserID()
	case couponallocated.FieldAppID:
		return m.AppID()
	case couponallocated.FieldUsed:
		return m.Used()
	case couponallocated.FieldCouponID:
		return m.CouponID()
	case couponallocated.FieldCreateAt:
		return m.CreateAt()
	case couponallocated.FieldUpdateAt:
		return m.UpdateAt()
	case couponallocated.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponAllocatedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponallocated.FieldUserID:
		return m.OldUserID(ctx)
	case couponallocated.FieldAppID:
		return m.OldAppID(ctx)
	case couponallocated.FieldUsed:
		return m.OldUsed(ctx)
	case couponallocated.FieldCouponID:
		return m.OldCouponID(ctx)
	case couponallocated.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case couponallocated.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case couponallocated.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CouponAllocated field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case couponallocated.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponallocated.FieldUsed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsed(v)
		return nil
	case couponallocated.FieldCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	case couponallocated.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case couponallocated.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case couponallocated.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponAllocatedMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, couponallocated.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, couponallocated.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, couponallocated.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponAllocatedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldCreateAt:
		return m.AddedCreateAt()
	case couponallocated.FieldUpdateAt:
		return m.AddedUpdateAt()
	case couponallocated.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case couponallocated.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case couponallocated.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponAllocatedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponAllocatedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CouponAllocated nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ResetField(name string) error {
	switch name {
	case couponallocated.FieldUserID:
		m.ResetUserID()
		return nil
	case couponallocated.FieldAppID:
		m.ResetAppID()
		return nil
	case couponallocated.FieldUsed:
		m.ResetUsed()
		return nil
	case couponallocated.FieldCouponID:
		m.ResetCouponID()
		return nil
	case couponallocated.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case couponallocated.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case couponallocated.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponAllocatedMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponAllocatedMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponAllocatedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponAllocatedMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponAllocatedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponAllocatedMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponAllocatedMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponAllocatedMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated edge %s", name)
}

// CouponPoolMutation represents an operation that mutates the CouponPool nodes in the graph.
type CouponPoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	denomination       *uint64
	adddenomination    *uint64
	ciculation         *int
	addciculation      *int
	used               *int
	addused            *int
	release_by_user_id *uuid.UUID
	start              *uint32
	addstart           *uint32
	duration_days      *int
	addduration_days   *int
	app_id             *uuid.UUID
	message            *string
	name               *string
	create_at          *uint32
	addcreate_at       *uint32
	update_at          *uint32
	addupdate_at       *uint32
	delete_at          *uint32
	adddelete_at       *uint32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CouponPool, error)
	predicates         []predicate.CouponPool
}

var _ ent.Mutation = (*CouponPoolMutation)(nil)

// couponpoolOption allows management of the mutation configuration using functional options.
type couponpoolOption func(*CouponPoolMutation)

// newCouponPoolMutation creates new mutation for the CouponPool entity.
func newCouponPoolMutation(c config, op Op, opts ...couponpoolOption) *CouponPoolMutation {
	m := &CouponPoolMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponPool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponPoolID sets the ID field of the mutation.
func withCouponPoolID(id uuid.UUID) couponpoolOption {
	return func(m *CouponPoolMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponPool
		)
		m.oldValue = func(ctx context.Context) (*CouponPool, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponPool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponPool sets the old CouponPool of the mutation.
func withCouponPool(node *CouponPool) couponpoolOption {
	return func(m *CouponPoolMutation) {
		m.oldValue = func(context.Context) (*CouponPool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponPoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponPoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponPool entities.
func (m *CouponPoolMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponPoolMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDenomination sets the "denomination" field.
func (m *CouponPoolMutation) SetDenomination(u uint64) {
	m.denomination = &u
	m.adddenomination = nil
}

// Denomination returns the value of the "denomination" field in the mutation.
func (m *CouponPoolMutation) Denomination() (r uint64, exists bool) {
	v := m.denomination
	if v == nil {
		return
	}
	return *v, true
}

// OldDenomination returns the old "denomination" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDenomination(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDenomination is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDenomination requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDenomination: %w", err)
	}
	return oldValue.Denomination, nil
}

// AddDenomination adds u to the "denomination" field.
func (m *CouponPoolMutation) AddDenomination(u uint64) {
	if m.adddenomination != nil {
		*m.adddenomination += u
	} else {
		m.adddenomination = &u
	}
}

// AddedDenomination returns the value that was added to the "denomination" field in this mutation.
func (m *CouponPoolMutation) AddedDenomination() (r uint64, exists bool) {
	v := m.adddenomination
	if v == nil {
		return
	}
	return *v, true
}

// ResetDenomination resets all changes to the "denomination" field.
func (m *CouponPoolMutation) ResetDenomination() {
	m.denomination = nil
	m.adddenomination = nil
}

// SetCiculation sets the "ciculation" field.
func (m *CouponPoolMutation) SetCiculation(i int) {
	m.ciculation = &i
	m.addciculation = nil
}

// Ciculation returns the value of the "ciculation" field in the mutation.
func (m *CouponPoolMutation) Ciculation() (r int, exists bool) {
	v := m.ciculation
	if v == nil {
		return
	}
	return *v, true
}

// OldCiculation returns the old "ciculation" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldCiculation(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCiculation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCiculation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCiculation: %w", err)
	}
	return oldValue.Ciculation, nil
}

// AddCiculation adds i to the "ciculation" field.
func (m *CouponPoolMutation) AddCiculation(i int) {
	if m.addciculation != nil {
		*m.addciculation += i
	} else {
		m.addciculation = &i
	}
}

// AddedCiculation returns the value that was added to the "ciculation" field in this mutation.
func (m *CouponPoolMutation) AddedCiculation() (r int, exists bool) {
	v := m.addciculation
	if v == nil {
		return
	}
	return *v, true
}

// ResetCiculation resets all changes to the "ciculation" field.
func (m *CouponPoolMutation) ResetCiculation() {
	m.ciculation = nil
	m.addciculation = nil
}

// SetUsed sets the "used" field.
func (m *CouponPoolMutation) SetUsed(i int) {
	m.used = &i
	m.addused = nil
}

// Used returns the value of the "used" field in the mutation.
func (m *CouponPoolMutation) Used() (r int, exists bool) {
	v := m.used
	if v == nil {
		return
	}
	return *v, true
}

// OldUsed returns the old "used" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldUsed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsed: %w", err)
	}
	return oldValue.Used, nil
}

// AddUsed adds i to the "used" field.
func (m *CouponPoolMutation) AddUsed(i int) {
	if m.addused != nil {
		*m.addused += i
	} else {
		m.addused = &i
	}
}

// AddedUsed returns the value that was added to the "used" field in this mutation.
func (m *CouponPoolMutation) AddedUsed() (r int, exists bool) {
	v := m.addused
	if v == nil {
		return
	}
	return *v, true
}

// ResetUsed resets all changes to the "used" field.
func (m *CouponPoolMutation) ResetUsed() {
	m.used = nil
	m.addused = nil
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *CouponPoolMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *CouponPoolMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *CouponPoolMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStart sets the "start" field.
func (m *CouponPoolMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *CouponPoolMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *CouponPoolMutation) AddStart(u uint32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *CouponPoolMutation) AddedStart() (r uint32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *CouponPoolMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetDurationDays sets the "duration_days" field.
func (m *CouponPoolMutation) SetDurationDays(i int) {
	m.duration_days = &i
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *CouponPoolMutation) DurationDays() (r int, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDurationDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds i to the "duration_days" field.
func (m *CouponPoolMutation) AddDurationDays(i int) {
	if m.addduration_days != nil {
		*m.addduration_days += i
	} else {
		m.addduration_days = &i
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *CouponPoolMutation) AddedDurationDays() (r int, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *CouponPoolMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponPoolMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponPoolMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponPoolMutation) ResetAppID() {
	m.app_id = nil
}

// SetMessage sets the "message" field.
func (m *CouponPoolMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CouponPoolMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *CouponPoolMutation) ResetMessage() {
	m.message = nil
}

// SetName sets the "name" field.
func (m *CouponPoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponPoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CouponPoolMutation) ResetName() {
	m.name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CouponPoolMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CouponPoolMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CouponPoolMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CouponPoolMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CouponPoolMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CouponPoolMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CouponPoolMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CouponPoolMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CouponPoolMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CouponPoolMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CouponPoolMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CouponPoolMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CouponPoolMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CouponPoolMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CouponPoolMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CouponPoolMutation builder.
func (m *CouponPoolMutation) Where(ps ...predicate.CouponPool) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponPoolMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponPool).
func (m *CouponPoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponPoolMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.denomination != nil {
		fields = append(fields, couponpool.FieldDenomination)
	}
	if m.ciculation != nil {
		fields = append(fields, couponpool.FieldCiculation)
	}
	if m.used != nil {
		fields = append(fields, couponpool.FieldUsed)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, couponpool.FieldReleaseByUserID)
	}
	if m.start != nil {
		fields = append(fields, couponpool.FieldStart)
	}
	if m.duration_days != nil {
		fields = append(fields, couponpool.FieldDurationDays)
	}
	if m.app_id != nil {
		fields = append(fields, couponpool.FieldAppID)
	}
	if m.message != nil {
		fields = append(fields, couponpool.FieldMessage)
	}
	if m.name != nil {
		fields = append(fields, couponpool.FieldName)
	}
	if m.create_at != nil {
		fields = append(fields, couponpool.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, couponpool.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, couponpool.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponPoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponpool.FieldDenomination:
		return m.Denomination()
	case couponpool.FieldCiculation:
		return m.Ciculation()
	case couponpool.FieldUsed:
		return m.Used()
	case couponpool.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case couponpool.FieldStart:
		return m.Start()
	case couponpool.FieldDurationDays:
		return m.DurationDays()
	case couponpool.FieldAppID:
		return m.AppID()
	case couponpool.FieldMessage:
		return m.Message()
	case couponpool.FieldName:
		return m.Name()
	case couponpool.FieldCreateAt:
		return m.CreateAt()
	case couponpool.FieldUpdateAt:
		return m.UpdateAt()
	case couponpool.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponPoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponpool.FieldDenomination:
		return m.OldDenomination(ctx)
	case couponpool.FieldCiculation:
		return m.OldCiculation(ctx)
	case couponpool.FieldUsed:
		return m.OldUsed(ctx)
	case couponpool.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case couponpool.FieldStart:
		return m.OldStart(ctx)
	case couponpool.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case couponpool.FieldAppID:
		return m.OldAppID(ctx)
	case couponpool.FieldMessage:
		return m.OldMessage(ctx)
	case couponpool.FieldName:
		return m.OldName(ctx)
	case couponpool.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case couponpool.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case couponpool.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CouponPool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponPoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponpool.FieldDenomination:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDenomination(v)
		return nil
	case couponpool.FieldCiculation:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCiculation(v)
		return nil
	case couponpool.FieldUsed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsed(v)
		return nil
	case couponpool.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case couponpool.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case couponpool.FieldDurationDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case couponpool.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponpool.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case couponpool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case couponpool.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case couponpool.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case couponpool.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponPool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponPoolMutation) AddedFields() []string {
	var fields []string
	if m.adddenomination != nil {
		fields = append(fields, couponpool.FieldDenomination)
	}
	if m.addciculation != nil {
		fields = append(fields, couponpool.FieldCiculation)
	}
	if m.addused != nil {
		fields = append(fields, couponpool.FieldUsed)
	}
	if m.addstart != nil {
		fields = append(fields, couponpool.FieldStart)
	}
	if m.addduration_days != nil {
		fields = append(fields, couponpool.FieldDurationDays)
	}
	if m.addcreate_at != nil {
		fields = append(fields, couponpool.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, couponpool.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, couponpool.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponPoolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponpool.FieldDenomination:
		return m.AddedDenomination()
	case couponpool.FieldCiculation:
		return m.AddedCiculation()
	case couponpool.FieldUsed:
		return m.AddedUsed()
	case couponpool.FieldStart:
		return m.AddedStart()
	case couponpool.FieldDurationDays:
		return m.AddedDurationDays()
	case couponpool.FieldCreateAt:
		return m.AddedCreateAt()
	case couponpool.FieldUpdateAt:
		return m.AddedUpdateAt()
	case couponpool.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponPoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponpool.FieldDenomination:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDenomination(v)
		return nil
	case couponpool.FieldCiculation:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCiculation(v)
		return nil
	case couponpool.FieldUsed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUsed(v)
		return nil
	case couponpool.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case couponpool.FieldDurationDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	case couponpool.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case couponpool.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case couponpool.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponPool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponPoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponPoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponPoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CouponPool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponPoolMutation) ResetField(name string) error {
	switch name {
	case couponpool.FieldDenomination:
		m.ResetDenomination()
		return nil
	case couponpool.FieldCiculation:
		m.ResetCiculation()
		return nil
	case couponpool.FieldUsed:
		m.ResetUsed()
		return nil
	case couponpool.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case couponpool.FieldStart:
		m.ResetStart()
		return nil
	case couponpool.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case couponpool.FieldAppID:
		m.ResetAppID()
		return nil
	case couponpool.FieldMessage:
		m.ResetMessage()
		return nil
	case couponpool.FieldName:
		m.ResetName()
		return nil
	case couponpool.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case couponpool.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case couponpool.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CouponPool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponPoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponPoolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponPoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponPoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponPoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponPoolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponPoolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponPool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponPoolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponPool edge %s", name)
}

// NewUserRewardSettingMutation represents an operation that mutates the NewUserRewardSetting nodes in the graph.
type NewUserRewardSettingMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	app_id                 *uuid.UUID
	registration_coupon_id *uuid.UUID
	kyc_coupon_id          *uuid.UUID
	create_at              *uint32
	addcreate_at           *uint32
	update_at              *uint32
	addupdate_at           *uint32
	delete_at              *uint32
	adddelete_at           *uint32
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*NewUserRewardSetting, error)
	predicates             []predicate.NewUserRewardSetting
}

var _ ent.Mutation = (*NewUserRewardSettingMutation)(nil)

// newuserrewardsettingOption allows management of the mutation configuration using functional options.
type newuserrewardsettingOption func(*NewUserRewardSettingMutation)

// newNewUserRewardSettingMutation creates new mutation for the NewUserRewardSetting entity.
func newNewUserRewardSettingMutation(c config, op Op, opts ...newuserrewardsettingOption) *NewUserRewardSettingMutation {
	m := &NewUserRewardSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeNewUserRewardSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNewUserRewardSettingID sets the ID field of the mutation.
func withNewUserRewardSettingID(id uuid.UUID) newuserrewardsettingOption {
	return func(m *NewUserRewardSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *NewUserRewardSetting
		)
		m.oldValue = func(ctx context.Context) (*NewUserRewardSetting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NewUserRewardSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNewUserRewardSetting sets the old NewUserRewardSetting of the mutation.
func withNewUserRewardSetting(node *NewUserRewardSetting) newuserrewardsettingOption {
	return func(m *NewUserRewardSettingMutation) {
		m.oldValue = func(context.Context) (*NewUserRewardSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NewUserRewardSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NewUserRewardSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NewUserRewardSetting entities.
func (m *NewUserRewardSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NewUserRewardSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *NewUserRewardSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *NewUserRewardSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *NewUserRewardSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (m *NewUserRewardSettingMutation) SetRegistrationCouponID(u uuid.UUID) {
	m.registration_coupon_id = &u
}

// RegistrationCouponID returns the value of the "registration_coupon_id" field in the mutation.
func (m *NewUserRewardSettingMutation) RegistrationCouponID() (r uuid.UUID, exists bool) {
	v := m.registration_coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationCouponID returns the old "registration_coupon_id" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldRegistrationCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRegistrationCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRegistrationCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationCouponID: %w", err)
	}
	return oldValue.RegistrationCouponID, nil
}

// ResetRegistrationCouponID resets all changes to the "registration_coupon_id" field.
func (m *NewUserRewardSettingMutation) ResetRegistrationCouponID() {
	m.registration_coupon_id = nil
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (m *NewUserRewardSettingMutation) SetKycCouponID(u uuid.UUID) {
	m.kyc_coupon_id = &u
}

// KycCouponID returns the value of the "kyc_coupon_id" field in the mutation.
func (m *NewUserRewardSettingMutation) KycCouponID() (r uuid.UUID, exists bool) {
	v := m.kyc_coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldKycCouponID returns the old "kyc_coupon_id" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldKycCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKycCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKycCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKycCouponID: %w", err)
	}
	return oldValue.KycCouponID, nil
}

// ResetKycCouponID resets all changes to the "kyc_coupon_id" field.
func (m *NewUserRewardSettingMutation) ResetKycCouponID() {
	m.kyc_coupon_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *NewUserRewardSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *NewUserRewardSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *NewUserRewardSettingMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *NewUserRewardSettingMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *NewUserRewardSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *NewUserRewardSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *NewUserRewardSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *NewUserRewardSettingMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *NewUserRewardSettingMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *NewUserRewardSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *NewUserRewardSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *NewUserRewardSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the NewUserRewardSetting entity.
// If the NewUserRewardSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewUserRewardSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *NewUserRewardSettingMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *NewUserRewardSettingMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *NewUserRewardSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the NewUserRewardSettingMutation builder.
func (m *NewUserRewardSettingMutation) Where(ps ...predicate.NewUserRewardSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NewUserRewardSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NewUserRewardSetting).
func (m *NewUserRewardSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NewUserRewardSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, newuserrewardsetting.FieldAppID)
	}
	if m.registration_coupon_id != nil {
		fields = append(fields, newuserrewardsetting.FieldRegistrationCouponID)
	}
	if m.kyc_coupon_id != nil {
		fields = append(fields, newuserrewardsetting.FieldKycCouponID)
	}
	if m.create_at != nil {
		fields = append(fields, newuserrewardsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, newuserrewardsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, newuserrewardsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NewUserRewardSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case newuserrewardsetting.FieldAppID:
		return m.AppID()
	case newuserrewardsetting.FieldRegistrationCouponID:
		return m.RegistrationCouponID()
	case newuserrewardsetting.FieldKycCouponID:
		return m.KycCouponID()
	case newuserrewardsetting.FieldCreateAt:
		return m.CreateAt()
	case newuserrewardsetting.FieldUpdateAt:
		return m.UpdateAt()
	case newuserrewardsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NewUserRewardSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case newuserrewardsetting.FieldAppID:
		return m.OldAppID(ctx)
	case newuserrewardsetting.FieldRegistrationCouponID:
		return m.OldRegistrationCouponID(ctx)
	case newuserrewardsetting.FieldKycCouponID:
		return m.OldKycCouponID(ctx)
	case newuserrewardsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case newuserrewardsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case newuserrewardsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown NewUserRewardSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewUserRewardSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case newuserrewardsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case newuserrewardsetting.FieldRegistrationCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationCouponID(v)
		return nil
	case newuserrewardsetting.FieldKycCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKycCouponID(v)
		return nil
	case newuserrewardsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case newuserrewardsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case newuserrewardsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown NewUserRewardSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NewUserRewardSettingMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, newuserrewardsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, newuserrewardsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, newuserrewardsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NewUserRewardSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case newuserrewardsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case newuserrewardsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case newuserrewardsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewUserRewardSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case newuserrewardsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case newuserrewardsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case newuserrewardsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown NewUserRewardSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NewUserRewardSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NewUserRewardSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NewUserRewardSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NewUserRewardSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NewUserRewardSettingMutation) ResetField(name string) error {
	switch name {
	case newuserrewardsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case newuserrewardsetting.FieldRegistrationCouponID:
		m.ResetRegistrationCouponID()
		return nil
	case newuserrewardsetting.FieldKycCouponID:
		m.ResetKycCouponID()
		return nil
	case newuserrewardsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case newuserrewardsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case newuserrewardsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown NewUserRewardSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NewUserRewardSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NewUserRewardSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NewUserRewardSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NewUserRewardSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NewUserRewardSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NewUserRewardSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NewUserRewardSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NewUserRewardSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NewUserRewardSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NewUserRewardSetting edge %s", name)
}

// PurchaseInvitationMutation represents an operation that mutates the PurchaseInvitation nodes in the graph.
type PurchaseInvitationMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	app_id             *uuid.UUID
	order_id           *uuid.UUID
	invitation_code_id *uuid.UUID
	create_at          *uint32
	addcreate_at       *uint32
	update_at          *uint32
	addupdate_at       *uint32
	delete_at          *uint32
	adddelete_at       *uint32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*PurchaseInvitation, error)
	predicates         []predicate.PurchaseInvitation
}

var _ ent.Mutation = (*PurchaseInvitationMutation)(nil)

// purchaseinvitationOption allows management of the mutation configuration using functional options.
type purchaseinvitationOption func(*PurchaseInvitationMutation)

// newPurchaseInvitationMutation creates new mutation for the PurchaseInvitation entity.
func newPurchaseInvitationMutation(c config, op Op, opts ...purchaseinvitationOption) *PurchaseInvitationMutation {
	m := &PurchaseInvitationMutation{
		config:        c,
		op:            op,
		typ:           TypePurchaseInvitation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPurchaseInvitationID sets the ID field of the mutation.
func withPurchaseInvitationID(id uuid.UUID) purchaseinvitationOption {
	return func(m *PurchaseInvitationMutation) {
		var (
			err   error
			once  sync.Once
			value *PurchaseInvitation
		)
		m.oldValue = func(ctx context.Context) (*PurchaseInvitation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PurchaseInvitation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPurchaseInvitation sets the old PurchaseInvitation of the mutation.
func withPurchaseInvitation(node *PurchaseInvitation) purchaseinvitationOption {
	return func(m *PurchaseInvitationMutation) {
		m.oldValue = func(context.Context) (*PurchaseInvitation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PurchaseInvitationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PurchaseInvitationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PurchaseInvitation entities.
func (m *PurchaseInvitationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PurchaseInvitationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *PurchaseInvitationMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *PurchaseInvitationMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *PurchaseInvitationMutation) ResetAppID() {
	m.app_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *PurchaseInvitationMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PurchaseInvitationMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PurchaseInvitationMutation) ResetOrderID() {
	m.order_id = nil
}

// SetInvitationCodeID sets the "invitation_code_id" field.
func (m *PurchaseInvitationMutation) SetInvitationCodeID(u uuid.UUID) {
	m.invitation_code_id = &u
}

// InvitationCodeID returns the value of the "invitation_code_id" field in the mutation.
func (m *PurchaseInvitationMutation) InvitationCodeID() (r uuid.UUID, exists bool) {
	v := m.invitation_code_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationCodeID returns the old "invitation_code_id" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldInvitationCodeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvitationCodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvitationCodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationCodeID: %w", err)
	}
	return oldValue.InvitationCodeID, nil
}

// ResetInvitationCodeID resets all changes to the "invitation_code_id" field.
func (m *PurchaseInvitationMutation) ResetInvitationCodeID() {
	m.invitation_code_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PurchaseInvitationMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PurchaseInvitationMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PurchaseInvitationMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PurchaseInvitationMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PurchaseInvitationMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PurchaseInvitationMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PurchaseInvitationMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PurchaseInvitationMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PurchaseInvitationMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PurchaseInvitationMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PurchaseInvitationMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PurchaseInvitationMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PurchaseInvitation entity.
// If the PurchaseInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PurchaseInvitationMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PurchaseInvitationMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PurchaseInvitationMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PurchaseInvitationMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PurchaseInvitationMutation builder.
func (m *PurchaseInvitationMutation) Where(ps ...predicate.PurchaseInvitation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PurchaseInvitationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PurchaseInvitation).
func (m *PurchaseInvitationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PurchaseInvitationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, purchaseinvitation.FieldAppID)
	}
	if m.order_id != nil {
		fields = append(fields, purchaseinvitation.FieldOrderID)
	}
	if m.invitation_code_id != nil {
		fields = append(fields, purchaseinvitation.FieldInvitationCodeID)
	}
	if m.create_at != nil {
		fields = append(fields, purchaseinvitation.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, purchaseinvitation.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, purchaseinvitation.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PurchaseInvitationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case purchaseinvitation.FieldAppID:
		return m.AppID()
	case purchaseinvitation.FieldOrderID:
		return m.OrderID()
	case purchaseinvitation.FieldInvitationCodeID:
		return m.InvitationCodeID()
	case purchaseinvitation.FieldCreateAt:
		return m.CreateAt()
	case purchaseinvitation.FieldUpdateAt:
		return m.UpdateAt()
	case purchaseinvitation.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PurchaseInvitationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case purchaseinvitation.FieldAppID:
		return m.OldAppID(ctx)
	case purchaseinvitation.FieldOrderID:
		return m.OldOrderID(ctx)
	case purchaseinvitation.FieldInvitationCodeID:
		return m.OldInvitationCodeID(ctx)
	case purchaseinvitation.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case purchaseinvitation.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case purchaseinvitation.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PurchaseInvitation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PurchaseInvitationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case purchaseinvitation.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case purchaseinvitation.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case purchaseinvitation.FieldInvitationCodeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationCodeID(v)
		return nil
	case purchaseinvitation.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case purchaseinvitation.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case purchaseinvitation.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PurchaseInvitation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PurchaseInvitationMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, purchaseinvitation.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, purchaseinvitation.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, purchaseinvitation.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PurchaseInvitationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case purchaseinvitation.FieldCreateAt:
		return m.AddedCreateAt()
	case purchaseinvitation.FieldUpdateAt:
		return m.AddedUpdateAt()
	case purchaseinvitation.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PurchaseInvitationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case purchaseinvitation.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case purchaseinvitation.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case purchaseinvitation.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PurchaseInvitation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PurchaseInvitationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PurchaseInvitationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PurchaseInvitationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PurchaseInvitation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PurchaseInvitationMutation) ResetField(name string) error {
	switch name {
	case purchaseinvitation.FieldAppID:
		m.ResetAppID()
		return nil
	case purchaseinvitation.FieldOrderID:
		m.ResetOrderID()
		return nil
	case purchaseinvitation.FieldInvitationCodeID:
		m.ResetInvitationCodeID()
		return nil
	case purchaseinvitation.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case purchaseinvitation.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case purchaseinvitation.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PurchaseInvitation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PurchaseInvitationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PurchaseInvitationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PurchaseInvitationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PurchaseInvitationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PurchaseInvitationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PurchaseInvitationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PurchaseInvitationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PurchaseInvitation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PurchaseInvitationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PurchaseInvitation edge %s", name)
}

// RegistrationInvitationMutation represents an operation that mutates the RegistrationInvitation nodes in the graph.
type RegistrationInvitationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	inviter_id    *uuid.UUID
	invitee_id    *uuid.UUID
	app_id        *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RegistrationInvitation, error)
	predicates    []predicate.RegistrationInvitation
}

var _ ent.Mutation = (*RegistrationInvitationMutation)(nil)

// registrationinvitationOption allows management of the mutation configuration using functional options.
type registrationinvitationOption func(*RegistrationInvitationMutation)

// newRegistrationInvitationMutation creates new mutation for the RegistrationInvitation entity.
func newRegistrationInvitationMutation(c config, op Op, opts ...registrationinvitationOption) *RegistrationInvitationMutation {
	m := &RegistrationInvitationMutation{
		config:        c,
		op:            op,
		typ:           TypeRegistrationInvitation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegistrationInvitationID sets the ID field of the mutation.
func withRegistrationInvitationID(id uuid.UUID) registrationinvitationOption {
	return func(m *RegistrationInvitationMutation) {
		var (
			err   error
			once  sync.Once
			value *RegistrationInvitation
		)
		m.oldValue = func(ctx context.Context) (*RegistrationInvitation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegistrationInvitation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegistrationInvitation sets the old RegistrationInvitation of the mutation.
func withRegistrationInvitation(node *RegistrationInvitation) registrationinvitationOption {
	return func(m *RegistrationInvitationMutation) {
		m.oldValue = func(context.Context) (*RegistrationInvitation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegistrationInvitationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegistrationInvitationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RegistrationInvitation entities.
func (m *RegistrationInvitationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegistrationInvitationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateAt sets the "create_at" field.
func (m *RegistrationInvitationMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *RegistrationInvitationMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *RegistrationInvitationMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *RegistrationInvitationMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *RegistrationInvitationMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *RegistrationInvitationMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *RegistrationInvitationMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *RegistrationInvitationMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *RegistrationInvitationMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *RegistrationInvitationMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *RegistrationInvitationMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *RegistrationInvitationMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// SetInviterID sets the "inviter_id" field.
func (m *RegistrationInvitationMutation) SetInviterID(u uuid.UUID) {
	m.inviter_id = &u
}

// InviterID returns the value of the "inviter_id" field in the mutation.
func (m *RegistrationInvitationMutation) InviterID() (r uuid.UUID, exists bool) {
	v := m.inviter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInviterID returns the old "inviter_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldInviterID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInviterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInviterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviterID: %w", err)
	}
	return oldValue.InviterID, nil
}

// ResetInviterID resets all changes to the "inviter_id" field.
func (m *RegistrationInvitationMutation) ResetInviterID() {
	m.inviter_id = nil
}

// SetInviteeID sets the "invitee_id" field.
func (m *RegistrationInvitationMutation) SetInviteeID(u uuid.UUID) {
	m.invitee_id = &u
}

// InviteeID returns the value of the "invitee_id" field in the mutation.
func (m *RegistrationInvitationMutation) InviteeID() (r uuid.UUID, exists bool) {
	v := m.invitee_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInviteeID returns the old "invitee_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldInviteeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInviteeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInviteeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviteeID: %w", err)
	}
	return oldValue.InviteeID, nil
}

// ResetInviteeID resets all changes to the "invitee_id" field.
func (m *RegistrationInvitationMutation) ResetInviteeID() {
	m.invitee_id = nil
}

// SetAppID sets the "app_id" field.
func (m *RegistrationInvitationMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *RegistrationInvitationMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *RegistrationInvitationMutation) ResetAppID() {
	m.app_id = nil
}

// Where appends a list predicates to the RegistrationInvitationMutation builder.
func (m *RegistrationInvitationMutation) Where(ps ...predicate.RegistrationInvitation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RegistrationInvitationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RegistrationInvitation).
func (m *RegistrationInvitationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegistrationInvitationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_at != nil {
		fields = append(fields, registrationinvitation.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, registrationinvitation.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, registrationinvitation.FieldDeleteAt)
	}
	if m.inviter_id != nil {
		fields = append(fields, registrationinvitation.FieldInviterID)
	}
	if m.invitee_id != nil {
		fields = append(fields, registrationinvitation.FieldInviteeID)
	}
	if m.app_id != nil {
		fields = append(fields, registrationinvitation.FieldAppID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegistrationInvitationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.CreateAt()
	case registrationinvitation.FieldUpdateAt:
		return m.UpdateAt()
	case registrationinvitation.FieldDeleteAt:
		return m.DeleteAt()
	case registrationinvitation.FieldInviterID:
		return m.InviterID()
	case registrationinvitation.FieldInviteeID:
		return m.InviteeID()
	case registrationinvitation.FieldAppID:
		return m.AppID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegistrationInvitationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case registrationinvitation.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case registrationinvitation.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case registrationinvitation.FieldInviterID:
		return m.OldInviterID(ctx)
	case registrationinvitation.FieldInviteeID:
		return m.OldInviteeID(ctx)
	case registrationinvitation.FieldAppID:
		return m.OldAppID(ctx)
	}
	return nil, fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistrationInvitationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case registrationinvitation.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case registrationinvitation.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case registrationinvitation.FieldInviterID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviterID(v)
		return nil
	case registrationinvitation.FieldInviteeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviteeID(v)
		return nil
	case registrationinvitation.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegistrationInvitationMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, registrationinvitation.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, registrationinvitation.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, registrationinvitation.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegistrationInvitationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.AddedCreateAt()
	case registrationinvitation.FieldUpdateAt:
		return m.AddedUpdateAt()
	case registrationinvitation.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistrationInvitationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case registrationinvitation.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case registrationinvitation.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegistrationInvitationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegistrationInvitationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegistrationInvitationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegistrationInvitationMutation) ResetField(name string) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case registrationinvitation.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case registrationinvitation.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case registrationinvitation.FieldInviterID:
		m.ResetInviterID()
		return nil
	case registrationinvitation.FieldInviteeID:
		m.ResetInviteeID()
		return nil
	case registrationinvitation.FieldAppID:
		m.ResetAppID()
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegistrationInvitationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegistrationInvitationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegistrationInvitationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegistrationInvitationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegistrationInvitationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegistrationInvitationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegistrationInvitationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegistrationInvitationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation edge %s", name)
}

// UserInvitationCodeMutation represents an operation that mutates the UserInvitationCode nodes in the graph.
type UserInvitationCodeMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	user_id         *uuid.UUID
	app_id          *uuid.UUID
	invitation_code *string
	create_at       *uint32
	addcreate_at    *uint32
	update_at       *uint32
	addupdate_at    *uint32
	delete_at       *uint32
	adddelete_at    *uint32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserInvitationCode, error)
	predicates      []predicate.UserInvitationCode
}

var _ ent.Mutation = (*UserInvitationCodeMutation)(nil)

// userinvitationcodeOption allows management of the mutation configuration using functional options.
type userinvitationcodeOption func(*UserInvitationCodeMutation)

// newUserInvitationCodeMutation creates new mutation for the UserInvitationCode entity.
func newUserInvitationCodeMutation(c config, op Op, opts ...userinvitationcodeOption) *UserInvitationCodeMutation {
	m := &UserInvitationCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeUserInvitationCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserInvitationCodeID sets the ID field of the mutation.
func withUserInvitationCodeID(id uuid.UUID) userinvitationcodeOption {
	return func(m *UserInvitationCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *UserInvitationCode
		)
		m.oldValue = func(ctx context.Context) (*UserInvitationCode, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserInvitationCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserInvitationCode sets the old UserInvitationCode of the mutation.
func withUserInvitationCode(node *UserInvitationCode) userinvitationcodeOption {
	return func(m *UserInvitationCodeMutation) {
		m.oldValue = func(context.Context) (*UserInvitationCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserInvitationCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserInvitationCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserInvitationCode entities.
func (m *UserInvitationCodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserInvitationCodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *UserInvitationCodeMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserInvitationCodeMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserInvitationCodeMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *UserInvitationCodeMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserInvitationCodeMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserInvitationCodeMutation) ResetAppID() {
	m.app_id = nil
}

// SetInvitationCode sets the "invitation_code" field.
func (m *UserInvitationCodeMutation) SetInvitationCode(s string) {
	m.invitation_code = &s
}

// InvitationCode returns the value of the "invitation_code" field in the mutation.
func (m *UserInvitationCodeMutation) InvitationCode() (r string, exists bool) {
	v := m.invitation_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationCode returns the old "invitation_code" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldInvitationCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvitationCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvitationCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationCode: %w", err)
	}
	return oldValue.InvitationCode, nil
}

// ResetInvitationCode resets all changes to the "invitation_code" field.
func (m *UserInvitationCodeMutation) ResetInvitationCode() {
	m.invitation_code = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserInvitationCodeMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserInvitationCodeMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserInvitationCodeMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserInvitationCodeMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserInvitationCodeMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserInvitationCodeMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserInvitationCodeMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserInvitationCodeMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserInvitationCodeMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserInvitationCodeMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserInvitationCodeMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserInvitationCodeMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserInvitationCodeMutation builder.
func (m *UserInvitationCodeMutation) Where(ps ...predicate.UserInvitationCode) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserInvitationCodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserInvitationCode).
func (m *UserInvitationCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserInvitationCodeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user_id != nil {
		fields = append(fields, userinvitationcode.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, userinvitationcode.FieldAppID)
	}
	if m.invitation_code != nil {
		fields = append(fields, userinvitationcode.FieldInvitationCode)
	}
	if m.create_at != nil {
		fields = append(fields, userinvitationcode.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userinvitationcode.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userinvitationcode.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserInvitationCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userinvitationcode.FieldUserID:
		return m.UserID()
	case userinvitationcode.FieldAppID:
		return m.AppID()
	case userinvitationcode.FieldInvitationCode:
		return m.InvitationCode()
	case userinvitationcode.FieldCreateAt:
		return m.CreateAt()
	case userinvitationcode.FieldUpdateAt:
		return m.UpdateAt()
	case userinvitationcode.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserInvitationCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userinvitationcode.FieldUserID:
		return m.OldUserID(ctx)
	case userinvitationcode.FieldAppID:
		return m.OldAppID(ctx)
	case userinvitationcode.FieldInvitationCode:
		return m.OldInvitationCode(ctx)
	case userinvitationcode.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userinvitationcode.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userinvitationcode.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInvitationCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userinvitationcode.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userinvitationcode.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userinvitationcode.FieldInvitationCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationCode(v)
		return nil
	case userinvitationcode.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userinvitationcode.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userinvitationcode.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserInvitationCodeMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, userinvitationcode.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userinvitationcode.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userinvitationcode.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserInvitationCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userinvitationcode.FieldCreateAt:
		return m.AddedCreateAt()
	case userinvitationcode.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userinvitationcode.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInvitationCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userinvitationcode.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userinvitationcode.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userinvitationcode.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserInvitationCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserInvitationCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserInvitationCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserInvitationCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserInvitationCodeMutation) ResetField(name string) error {
	switch name {
	case userinvitationcode.FieldUserID:
		m.ResetUserID()
		return nil
	case userinvitationcode.FieldAppID:
		m.ResetAppID()
		return nil
	case userinvitationcode.FieldInvitationCode:
		m.ResetInvitationCode()
		return nil
	case userinvitationcode.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userinvitationcode.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userinvitationcode.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserInvitationCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserInvitationCodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserInvitationCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserInvitationCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserInvitationCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserInvitationCodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserInvitationCodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserInvitationCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserInvitationCodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserInvitationCode edge %s", name)
}
