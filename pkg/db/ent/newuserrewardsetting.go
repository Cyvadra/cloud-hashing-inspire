// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/newuserrewardsetting"
	"github.com/google/uuid"
)

// NewUserRewardSetting is the model entity for the NewUserRewardSetting schema.
type NewUserRewardSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// RegistrationCouponID holds the value of the "registration_coupon_id" field.
	RegistrationCouponID uuid.UUID `json:"registration_coupon_id,omitempty"`
	// KycCouponID holds the value of the "kyc_coupon_id" field.
	KycCouponID uuid.UUID `json:"kyc_coupon_id,omitempty"`
	// AutoGenerateInvitationCode holds the value of the "auto_generate_invitation_code" field.
	AutoGenerateInvitationCode bool `json:"auto_generate_invitation_code,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NewUserRewardSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case newuserrewardsetting.FieldAutoGenerateInvitationCode:
			values[i] = new(sql.NullBool)
		case newuserrewardsetting.FieldCreateAt, newuserrewardsetting.FieldUpdateAt, newuserrewardsetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case newuserrewardsetting.FieldID, newuserrewardsetting.FieldAppID, newuserrewardsetting.FieldRegistrationCouponID, newuserrewardsetting.FieldKycCouponID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NewUserRewardSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NewUserRewardSetting fields.
func (nurs *NewUserRewardSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case newuserrewardsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				nurs.ID = *value
			}
		case newuserrewardsetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				nurs.AppID = *value
			}
		case newuserrewardsetting.FieldRegistrationCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field registration_coupon_id", values[i])
			} else if value != nil {
				nurs.RegistrationCouponID = *value
			}
		case newuserrewardsetting.FieldKycCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field kyc_coupon_id", values[i])
			} else if value != nil {
				nurs.KycCouponID = *value
			}
		case newuserrewardsetting.FieldAutoGenerateInvitationCode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_generate_invitation_code", values[i])
			} else if value.Valid {
				nurs.AutoGenerateInvitationCode = value.Bool
			}
		case newuserrewardsetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				nurs.CreateAt = uint32(value.Int64)
			}
		case newuserrewardsetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				nurs.UpdateAt = uint32(value.Int64)
			}
		case newuserrewardsetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				nurs.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NewUserRewardSetting.
// Note that you need to call NewUserRewardSetting.Unwrap() before calling this method if this NewUserRewardSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (nurs *NewUserRewardSetting) Update() *NewUserRewardSettingUpdateOne {
	return (&NewUserRewardSettingClient{config: nurs.config}).UpdateOne(nurs)
}

// Unwrap unwraps the NewUserRewardSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nurs *NewUserRewardSetting) Unwrap() *NewUserRewardSetting {
	tx, ok := nurs.config.driver.(*txDriver)
	if !ok {
		panic("ent: NewUserRewardSetting is not a transactional entity")
	}
	nurs.config.driver = tx.drv
	return nurs
}

// String implements the fmt.Stringer.
func (nurs *NewUserRewardSetting) String() string {
	var builder strings.Builder
	builder.WriteString("NewUserRewardSetting(")
	builder.WriteString(fmt.Sprintf("id=%v", nurs.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", nurs.AppID))
	builder.WriteString(", registration_coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", nurs.RegistrationCouponID))
	builder.WriteString(", kyc_coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", nurs.KycCouponID))
	builder.WriteString(", auto_generate_invitation_code=")
	builder.WriteString(fmt.Sprintf("%v", nurs.AutoGenerateInvitationCode))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", nurs.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", nurs.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", nurs.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// NewUserRewardSettings is a parsable slice of NewUserRewardSetting.
type NewUserRewardSettings []*NewUserRewardSetting

func (nurs NewUserRewardSettings) config(cfg config) {
	for _i := range nurs {
		nurs[_i].config = cfg
	}
}
